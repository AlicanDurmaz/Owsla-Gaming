/*
		 __________   ___   ______  __       _______. __    ______   .__   __.
		|   ____\  \ /  /  /      ||  |     /       ||  |  /  __  \  |  \ |  |
		|  |__   \  V  /  |  ,----'|  |    |   (----`|  | |  |  |  | |   \|  |
		|   __|   >   <   |  |     |  |     \   \    |  | |  |  |  | |  . `  |
		|  |____ /  .  \  |  `----.|  | .----)   |   |  | |  `--'  | |  |\   |
		|_______/__/ \__\  \______||__| |_______/    |__|  \______/  |__| \__|
		 																	  */
#include 																<a_samp>

#undef	MAX_PLAYERS
#define	MAX_PLAYERS	50

#include 																<a_http>
#include 															   <a_mysql>
#include 														   <crashdetect>
#include   															  <Pawn.CMD>
#include   															   <sscanf2>
#include   															  <streamer>
#include                                                               <foreach>
#include 														 <weapon-config>
#include                   											 <callbacks>
#include 															<mSelection>
#include                                                         <attachmentfix>

#define function%0(%1) forward%0(%1); public%0(%1)

new MySQL: Owsla;

#define		MYSQL_HOST 			"127.0.0.1"
#define		MYSQL_USER 			"root"
#define		MYSQL_PASSWORD 		""
#define		MYSQL_DATABASE 		"owslam"

#define Bilgi(%0,%1); SendClientMessage(%0, GetPlayerColor(%0), %1), PlayerPlaySound(%0, 1057, 0.0, 0.0, 10.0);
#define Hata(%0,%1); SendClientMessage(%0, 0xE74C3CFF, %1), PlayerPlaySound(%0, 1058, 0.0, 0.0, 10.0);
#define Kullanim(%0,%1); SendClientMessage(%0, 0xFFCC33FF, %1), PlayerPlaySound(%0, 1057, 0.0, 0.0, 10.0);

#define GivePlayerScore(%0,%1); SetPlayerScore(%0, GetPlayerScore(%0)+%1);

#define CMD_ADMIN 1

#define	MAX_REPORT 	100
#define	MAX_SPAWNS 	10
#define	MAX_ATTACHMENTS_PER_PLAYER 10
#define	MAX_DM 15
#define MAX_UPDATES 50

#define ANA_RENK "{93FF93}"

enum
{
	DIALOG_UNUSED,
	DIALOG_LOGIN,
	DIALOG_REGISTER,
	DIALOG_CONFIG,
	DIALOG_CONFIG_PING,
	DIALOG_CONFIG_TIME,
	DIALOG_CONFIG_WEATHER,
	DIALOG_CONFIG_LOCK,
	DIALOG_SETTINGS,
	DIALOG_UNBAN,
	DIALOG_UNSBAN,
	DIALOG_UNNBAN,
	DIALOG_UNIPBAN,
	DIALOG_OBJECTS,
	DIALOG_OBJECTS1,
	DIALOG_OBJECTS2,
	DIALOG_BUGRAPORLAR,
	DIALOG_UPDATES,
	DIALOG_DMS,
	DIALOG_SPAWNS
};

enum E_PLAYERS
{
	UserID,
	Name[MAX_PLAYER_NAME],
	IP[16],
	Password[65],
	Salt[17],
	Admin,
	Anim,
	DJ,
	VIP,
	VIPSure,
	Money,
	Score,
	Exp,
	ExpLevel,
	Kills,
	Deaths,
	Banned,
	KickCount,
	BanCount,
	WarnCount,
	Cache: Cache_ID,
	bool: IsLoggedIn,
	LoginAttempts,
	LoginTimer,
	bool: SpawnBolgesinde,
	SpawnID,
	bool: Araba,
	Arabam,
	pFPS,
	YaraliTime,
	TalkTime,
	bool: PMengel,
	LastPM,
	bool: God,
	AntiCash,
	FakeKill,
	ListPage,
	bool:Dmde,
	DmID
};
new PlayerInfo[MAX_PLAYERS][E_PLAYERS];
new g_MysqlRaceCheck[MAX_PLAYERS];

enum dmVars
{
	dID,
	dName[25],
	dWeap1,
	dWeap2,
	dWeap3,
	Float: dPos[3],
	dInt,
	dWorld,
	Float: dHP[2]
};
new DmInfo[MAX_DM][dmVars];
    
enum svVars
{
	MaxPing,
	Time,
	Weather,
	Headshot,
	Rekor,
	bool: Kilit,
	AntiProxy,
	bool: Chat
};
new ServerInfo[svVars];

enum atData
{
	bool:used1,
	index1,
	modelid1,
	bone1,
	Float:fOffsetX1,
	Float:fOffsetY1,
	Float:fOffsetZ1,
	Float:fRotX1,
	Float:fRotY1,
	Float:fRotZ1,
	Float:fScaleX1,
	Float:fScaleY1,
	Float:fScaleZ1
}
new AttachInfo[MAX_PLAYERS][MAX_ATTACHMENTS_PER_PLAYER][atData], inindex[MAX_PLAYERS], inmodel[MAX_PLAYERS];
	
new AttachmentObjectsList[] =
{
	18632, 18633, 18634, 18635, 18636,
	18637, 18638, 18639, 18640, 18975,
	19136, 19274, 18641, 18642, 18643,
	18644, 18645, 18865, 18866, 18867,
	18868, 18869, 18870, 18871, 18872,
	18873, 18874, 18875, 18890, 18891,
	18892, 18893, 18894, 18895, 18896,
	18897, 18898, 18899, 18900, 18901,
	18902, 18903, 18904, 18905, 18906,
	18907, 18908, 18909, 18910, 18911,
	18912, 18913, 18914, 18915, 18916,
	18917, 18918, 18919, 18920, 18921,
	18922, 18923, 18924, 18925, 18926,
	18927, 18928, 18929, 18930, 18931,
	18932, 18933, 18934, 18935, 18936,
	18937, 18938, 18939, 18940, 18941,
	18942, 18943, 18944, 18945, 18946,
	18947, 18948, 18949, 18950, 18951,
	18952, 18953, 18954, 18955, 18956,
	18957, 18958, 18959, 18960, 18961,
	18962, 18963, 18964, 18965, 18966,
	18967, 18968, 18969, 18970, 18971,
	18972, 18973, 18974, 18976, 18977,
	18978, 18979, 19006, 19007, 19008,
	19009, 19010, 19011, 19012, 19013,
	19014, 19015, 19016, 19017, 19018,
	19019, 19020, 19021, 19022, 19023,
	19024, 19025, 19026, 19027, 19028,
	19029, 19030, 19031, 19032, 19033,
	19034, 19035, 19036, 19037, 19038,
	19039, 19040, 19041, 19042, 19043,
	19044, 19045, 19046, 19047, 19048,
	19049, 19050, 19051, 19052, 19053,
	19085, 19086, 19090, 19091, 19092,
	19093, 19094, 19095, 19096, 19097,
	19098, 19099, 19100, 19101, 19102,
	19103, 19104, 19105, 19106, 19107,
	19108, 19109, 19110, 19111, 19112,
	19113, 19114, 19115, 19116, 19117,
	19118, 19119, 19120, 19137, 19138,
	19139, 19140, 19141, 19142, 19160,
	19161, 19162, 19163, 19317, 19318,
	19319, 19330, 19331, 19346, 19347,
	19348, 19349, 19350, 19351, 19352,
	19487, 19488, 19513, 19515, 331,
	333, 334, 335, 336, 337, 338, 339,
	341, 321, 322, 323, 324, 325, 326,
	343, 346, 347, 348, 349, 350, 351,
	352,353, 355, 356, 372, 357, 358,
	361, 363, 364, 365, 366, 367, 368,
	369, 371
};

enum cmVars
{
	kIsim[36]
};
new OyuncuKomutlari[][cmVars] =
{
	{"/pm"}, {"/re"}, {"/ayarlar"}, {"/cezalarim"}, {"/veh"}, {"/v"}, {"/car"}, {"/djs"}, {"/vips"}, {"/admins"}, {"/anims"}, {"/objects"}, {"/bugrapor"},
	{"/basarimlar"}, {"/dmler"}, {"/dm"}, {"/dmcik"}
};
enum acVars
{
	cLevel,
	cIsim[36],
	cAciklama[56]
};
new AdminKomutlari[][acVars] =
{
	{10, "/makeadmin",	"Oyuncuyu Admin yapar."},
	{10, "/makeanim",	"Oyuncuyu Anim yapar."},
	{10, "/makedj",	"Oyuncuyu DJ yapar."},
	{10, "/makevip",	"Oyuncuyu VIP yapar."},
	{10, "/createdm",	"Dinamik DM oluşturur."},
	{10, "/lsay",	"Olaylar textdrawında bildirim yapar."},
	{10, "/config",	"Oyun ayarlarını değiştirir."},
	{10, "/spawnekle",	"Dinamik spawn oluşturur."},
	{10, "/spawnsil",	"Oluşturulmuş olan spawnı siler."},
	{10, "/alladmins",	"Bütün adminleri gösterir."},
	{10, "/allanims",	"Bütün animleri gösterir."},
	{10, "/alldjs",	"Bütün djleri gösterir."},
	{10, "/setcash",	"Istediğiniz kişinin parasını ayarlar."},
	{10, "/setscore",	"Istediğiniz kişinin skorunu ayarlar."},
	{10, "/kickall",	"Sunucudan herkesi atar."},
	{10, "/killall",	"Herkesi öldürür."},
	{10, "/giveallmoney",	"Herkese para verir."},
	{10, "/giveallscore",	"Herkese skor verir."},
	{10, "/spawnlar",	"Oluşturulmuş olan spawnları gösterir."},
	{10, "/addupdate",	"Güncelleme notu ekler."},
	{10, "/updatedel",	"Güncelleme notunu siler."},
	{9, "/getip",	"Oyuncunun ipsini gösterir."},
	{9, "/bugraporlar",	"Raporlanmış bugları gösterir."},
    {9, "/bugraporsil",	"Raporlanmış olan bugı siler."},
    {8, "/setcolor",	"Oyuncunun rengini ayarlar."},
    {8, "/unban",	"Ban listesini gösterir."},
    {7, "/rac",	"Kullanılmayan araçları respawn eder."},
    {7, "/offban",	"Offline ban atar."},
    {7, "/rban",	"Range ban atar."},
    {6, "/god",	"God modunu açar."},
    {6, "/nban",	"Name ban atar."},
    {5, "/ban",	"Süreli ban atar."},
    {5, "/akill",	"Istediğiniz oyuncuyu öldürür."},
    {2, "/kick",	"Oyuncuyu sunucudan atar."},
    {1, "/aka",	"Istediğiniz oyuncunun isim geçmişini gösterir."}
};

enum mdVars
{
	 mIsim[30],
	 mAciklama[80],
     mOdul[3]
};
new MedalInfo[][mdVars] =
{
	{"King of OWSLA", "Butun basarimlari tamamla!", {20000000, 100, 200}}, //0
	{"Ilk Mesaj", "Ilk kez yazı yaz", {1000, 2, 5}}, //1
	{"Ilk Komut", "Ilk kez komut kullan", {1000, 3, 5}} //2
};
new MyMedals[MAX_PLAYERS][sizeof(MedalInfo)];

new PlayerColors[200] =
{
	0xFF8C13FF, 0xC715FFFF, 0x20B2AAFF, 0xDC143CFF, 0x6495EDFF, 0xf0e68cFF, 0x778899FF, 0xFF1493FF, 0xF4A460FF,
	0xEE82EEFF, 0xFFD720FF, 0x8b4513FF, 0x4949A0FF, 0x148b8bFF, 0x14ff7fFF, 0x556b2fFF, 0x0FD9FAFF, 0x10DC29FF,
	0x534081FF, 0x0495CDFF, 0xEF6CE8FF, 0xBD34DAFF, 0x247C1BFF, 0x0C8E5DFF, 0x635B03FF, 0xCB7ED3FF, 0x65ADEBFF,
	0x5C1ACCFF, 0xF2F853FF, 0x11F891FF, 0x7B39AAFF, 0x53EB10FF, 0x54137DFF, 0x275222FF, 0xF09F5BFF, 0x3D0A4FFF,
	0x22F767FF, 0xD63034FF, 0x9A6980FF, 0xDFB935FF, 0x3793FAFF, 0x90239DFF, 0xE9AB2FFF, 0xAF2FF3FF, 0x057F94FF,
	0xB98519FF, 0x388EEAFF, 0x028151FF, 0xA55043FF, 0x0DE018FF, 0x93AB1CFF, 0x95BAF0FF, 0x369976FF, 0x18F71FFF,
	0x4B8987FF, 0x491B9EFF, 0x829DC7FF, 0xBCE635FF, 0xCEA6DFFF, 0x20D4ADFF, 0x2D74FDFF, 0x3C1C0DFF, 0x12D6D4FF,
	0x48C000FF, 0x2A51E2FF, 0xE3AC12FF, 0xFC42A8FF, 0x2FC827FF, 0x1A30BFFF, 0xB740C2FF, 0x42ACF5FF, 0x2FD9DEFF,
	0xFAFB71FF, 0x05D1CDFF, 0xC471BDFF, 0x94436EFF, 0xC1F7ECFF, 0xCE79EEFF, 0xBD1EF2FF, 0x93B7E4FF, 0x3214AAFF,
	0x184D3BFF, 0xAE4B99FF, 0x7E49D7FF, 0x4C436EFF, 0xFA24CCFF, 0xCE76BEFF, 0xA04E0AFF, 0x9F945CFF, 0xDCDE3DFF,
	0x10C9C5FF, 0x70524DFF, 0x0BE472FF, 0x8A2CD7FF, 0x6152C2FF, 0xCF72A9FF, 0xE59338FF, 0xEEDC2DFF, 0xD8C762FF,
	0xD8C762FF, 0xFF8C13FF, 0xC715FFFF, 0x20B2AAFF, 0xDC143CFF, 0x6495EDFF, 0xf0e68cFF, 0x778899FF, 0xFF1493FF,
	0xF4A460FF, 0xEE82EEFF, 0xFFD720FF, 0x8b4513FF, 0x4949A0FF, 0x148b8bFF, 0x14ff7fFF, 0x556b2fFF, 0x0FD9FAFF,
	0x10DC29FF, 0x534081FF, 0x0495CDFF, 0xEF6CE8FF, 0xBD34DAFF, 0x247C1BFF, 0x0C8E5DFF, 0x635B03FF, 0xCB7ED3FF,
	0x65ADEBFF, 0x5C1ACCFF, 0xF2F853FF, 0x11F891FF, 0x7B39AAFF, 0x53EB10FF, 0x54137DFF, 0x275222FF, 0xF09F5BFF,
	0x3D0A4FFF, 0x22F767FF, 0xD63034FF, 0x9A6980FF, 0xDFB935FF, 0x3793FAFF, 0x90239DFF, 0xE9AB2FFF, 0xAF2FF3FF,
	0x057F94FF, 0xB98519FF, 0x388EEAFF, 0x028151FF, 0xA55043FF, 0x0DE018FF, 0x93AB1CFF, 0x95BAF0FF, 0x369976FF,
	0x18F71FFF, 0x4B8987FF, 0x491B9EFF, 0x829DC7FF, 0xBCE635FF, 0xCEA6DFFF, 0x20D4ADFF, 0x2D74FDFF, 0x3C1C0DFF,
	0x12D6D4FF, 0x48C000FF, 0x2A51E2FF, 0xE3AC12FF, 0xFC42A8FF, 0x2FC827FF, 0x1A30BFFF, 0xB740C2FF, 0x42ACF5FF,
	0x2FD9DEFF, 0xFAFB71FF, 0x05D1CDFF, 0xC471BDFF, 0x94436EFF, 0xC1F7ECFF, 0xCE79EEFF, 0xBD1EF2FF, 0x93B7E4FF,
	0x3214AAFF, 0x184D3BFF, 0xAE4B99FF, 0x7E49D7FF, 0x4C436EFF, 0xFA24CCFF, 0xCE76BEFF, 0xA04E0AFF, 0x9F945CFF,
	0xDCDE3DFF, 0x10C9C5FF, 0x70524DFF, 0x0BE472FF, 0x8A2CD7FF, 0x6152C2FF, 0xCF72A9FF, 0xE59338FF, 0xEEDC2DFF,
	0xD8C762FF, 0xD8C762FF
};
enum spVars
{
	Float: spawnX,
	Float: spawnY,
	Float: spawnZ,
	Float: spawnA,
	spawnPickup,
	Text3D: spawn3D,
    spawnIcon,
    spawnArea,
    spawnZone
};
new SpawnInfo[MAX_SPAWNS][spVars];

new
	Iterator: Raporlar<MAX_REPORT>,
	Iterator: Updates<MAX_UPDATES>,
	Iterator: Spawnlar<MAX_SPAWNS>,
	Iterator: Dmler<MAX_DM>;

enum e_sazone
{
    SAZONE_NAME[28],
    Float: SAZONE_AREA[6]
};
new SAZones[][e_sazone] =
{
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};
new
	Text:AltText, Text:AltText1, Text:AltText2, Text:AltText3, Text:AltText4,
	Text:AltText5, Text:AltText6, Text:TuyoText, Text:NewsText, Text:SaatBox, Text:Saatx,
	Text:OlayText[5],
	MessageStr[5][1024],
	EVT[5] = -1,
	PlayerText:HizBar[MAX_PLAYERS][16], PlayerText:HizText[MAX_PLAYERS], PlayerText:HizBox[MAX_PLAYERS],
	S_Color[] =
	{
		0xffffffff, 0xCBFFBFff, 0xCBFFBFff, 0x94FF7Dff, 0xB5FE63ff, 0xEBFE63ff,
		0xFFE862ff, 0xFFD362ff, 0xFEB063ff, 0xFEA043ff, 0xFEA043ff, 0xFE7B43ff,
		0xFE7B43ff, 0xFF0606ff, 0xFF0606ff, 0xFF0000FF, 0xFF0000FF
	},
	PlayerText:Kill[MAX_PLAYERS], PlayerText:Death[MAX_PLAYERS], PlayerText:Ratio[MAX_PLAYERS],
	PlayerText:Skorr[MAX_PLAYERS], PlayerText:Fps[MAX_PLAYERS], PlayerText:Ping[MAX_PLAYERS], PlayerText:ExpText[MAX_PLAYERS],
	Text:KillBox, Text:KillSprite, Text:DeathSprite, Text:DeathSprite2, Text:KillSprite2, Text:SkorSprite,
	Text:FpsBox, Text:FpsSprite, Text:PingSprite, Text:ExpBox
;
new AracIsimler[212][] =
{
	{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},
	{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
	{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
	{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
	{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
	{"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},
	{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},{"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},
	{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},
	{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},{"Police Car (LVPD)"},{"Police Ranger"},{"Picador"},{"S.W.A.T. Van"},{"Alpha"},{"Phoenix"},{"Glendale"},
	{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},{"Utility Trailer"}
};
new SiraEx = 0, msg_Timer = 0, host_Timer = 0, news_Timer = 0, odul_timer = 0;

enum ColorsVars
{
	ColorName[16],
	ColorID[7]
};
new ColorsTag[][ColorsVars] =
{
	{"g", "00FF00"}, {"r", "FF0000"}, {"w", "FFFFFF"},
	{"b", "0000FF"}, {"y", "FFCC00"}, {"o", "FF9900"},
	{"t", "00FFFF"}, {"p", "FF00FF"}
};
new MonthTimes[12][4] =
{
	{31, 31, 2678400, 2678400},
 	{28, 29, 2419200, 2505600},
  	{31, 31, 2678400, 2678400},
   	{30, 30, 2592000, 2592000},
    {31, 31, 2678400, 2678400},
    {30, 30, 2592000, 2592000},
    {31, 31, 2678400, 2678400},
    {31, 31, 2678400, 2678400},
    {30, 30, 2592000, 2592000},
    {31, 31, 2678400, 2678400},
    {30, 30, 2592000, 2592000},
	{31, 31, 2678400, 2678400}
};
main()
{
	AntiDeAMX();
	WasteDeAMXersTime();
	new Yil, Ay, Gun, Saat, Dakika, Saniye;
	getdate(Yil, Ay, Gun), gettime(Saat, Dakika, Saniye);
	print("																");
	print("																");
	print("\t» ===============[E][X][C][I][S][I][O][N]=============== «");
	print("\t»                                                        «");
	print("\t»                       Owsla Gaming                     «");
	print("\t»                         Excision                       «");
	print("\t»                                                        «");
	print("\t» ===============[E][X][C][I][S][I][O][N]=============== «");
	printf("\t» =========== Tarih: %d/%d/%d Saat: %02d:%02d:%02d =========== «",Gun, Ay, Yil, Saat, Dakika, Saniye);
	print("																");
	print("																");
}
AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}
WasteDeAMXersTime()
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}

public OnGameModeInit()
{
    foreach(new i: Player) Kick(i);
	new MySQLOpt: option_id = mysql_init_options();
	mysql_set_option(option_id, AUTO_RECONNECT, true);
	Owsla = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, option_id);
	mysql_log(ERROR | WARNING);
	if (Owsla == MYSQL_INVALID_HANDLE || mysql_errno(Owsla) != 0)
	{
		print("MySQL bağlantısı sağlanamadı, server kapatılıyor!");
		SendRconCommand("exit");
		return 1;
	}
	print("MySQL bağlantısı başarılı!");
    CreateMysqlTables();
    
  	mysql_tquery(Owsla, "SELECT * FROM `spawnlar`", "LoadSpawns");
  	mysql_tquery(Owsla, "SELECT * FROM `server`", "LoadSettings");
  	mysql_tquery(Owsla, "SELECT * FROM `raporlar`", "LoadRapors");
  	mysql_tquery(Owsla, "SELECT * FROM `Updates`", "LoadUpdates");
	mysql_tquery(Owsla, "SELECT * FROM `dmler`", "LoadDMs");
	
  	SetTimer("GenelTimer", 1000, true);
    UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
    ShowPlayerMarkers(1);
	ShowNameTags(1);
	DisableInteriorEnterExits();
	UpdateHostname();
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 500);
	for(new i = 0; i <= 299; i++)
	{
	    if(i == 74) continue;
		AddPlayerClass(i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	}
	LoadTextdraws();
	return 1;
}
public OnGameModeExit()
{
	foreach(new i: Player) OnPlayerDisconnect(i, 1);
	mysql_close(Owsla);
	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
    if(!GetPVarInt(playerid, "OnPlayerRequestClassCam"))
	{
	    InterpolateCameraPos(playerid, 841.454345, -1643.089599, 35.314575, 721.786010, -1637.091552, 6.024209, 7000);
		InterpolateCameraLookAt(playerid, 836.783691, -1641.372314, 34.828559, 717.214965, -1635.289794, 5.097340, 6000);
	    SetPVarInt(playerid, "OnPlayerRequestClassCam", 1);
	}
	SetPlayerPos(playerid, 712.6076,-1633.9952,3.4297);
	SetPlayerFacingAngle(playerid, -90);
	return 1;
}
public OnPlayerRequestSpawn(playerid)
{
    StopAudioStreamForPlayer(playerid);
	TextDrawShowForPlayer(playerid, AltText), TextDrawShowForPlayer(playerid, AltText1), TextDrawShowForPlayer(playerid, AltText2);
	TextDrawShowForPlayer(playerid, AltText3), TextDrawShowForPlayer(playerid, AltText4), TextDrawShowForPlayer(playerid, AltText5);
	TextDrawShowForPlayer(playerid, AltText6), TextDrawShowForPlayer(playerid, TuyoText), TextDrawShowForPlayer(playerid, NewsText);
	for(new i = 0; i < 5; i++)
	{
		TextDrawShowForPlayer(playerid, OlayText[i]);
	}
	TextDrawShowForPlayer(playerid, KillBox), TextDrawShowForPlayer(playerid, KillSprite), PlayerTextDrawShow(playerid, Kill[playerid]);
    TextDrawShowForPlayer(playerid, DeathSprite), PlayerTextDrawShow(playerid, Death[playerid]);
    TextDrawShowForPlayer(playerid, DeathSprite2), TextDrawShowForPlayer(playerid, KillSprite2), PlayerTextDrawShow(playerid, Ratio[playerid]);
    TextDrawShowForPlayer(playerid, SkorSprite), PlayerTextDrawShow(playerid, Skorr[playerid]);
    TextDrawShowForPlayer(playerid, FpsBox), TextDrawShowForPlayer(playerid, FpsSprite), TextDrawShowForPlayer(playerid, PingSprite);
    PlayerTextDrawShow(playerid, Fps[playerid]), PlayerTextDrawShow(playerid, Ping[playerid]);
    TextDrawShowForPlayer(playerid, ExpBox), PlayerTextDrawShow(playerid, ExpText[playerid]);
    TextDrawShowForPlayer(playerid, SaatBox), TextDrawShowForPlayer(playerid, Saatx);
    foreach(new i: Spawnlar)
    {
        GangZoneShowForPlayer(playerid, SpawnInfo[i][spawnZone], 0xFF990066);
    }
	return 1;
}
stock VerileriTemizle(playerid)
{
    for(new E_PLAYERS:e; e < E_PLAYERS; ++e) PlayerInfo[playerid][e] = 0;
    PlayerInfo[playerid][ExpLevel] = 1;
    PlayerInfo[playerid][LastPM] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][PMengel] = true;
    PlayerInfo[playerid][SpawnID] = -1;
    PlayerInfo[playerid][DmID] = -1;
	for(new x = 0; x < sizeof(MedalInfo); x++)
	{
        MyMedals[playerid][x] = 0;
	}
    for(new i; i < MAX_ATTACHMENTS_PER_PLAYER; i++)
	{
		AttachInfo[playerid][i][used1] = false;
	}
}
public OnPlayerConnect(playerid)
{
	g_MysqlRaceCheck[playerid]++;
	VerileriTemizle(playerid);
	GetPlayerName(playerid, PlayerInfo[playerid][Name], MAX_PLAYER_NAME);
	GetPlayerIp(playerid, PlayerInfo[playerid][IP], 16);

    new str[512];
	if(ServerInfo[AntiProxy] == 1 && strcmp(PlayerInfo[playerid][IP], "127.0.0.1", true))
	{
		format(str, sizeof(str), "proxy.mind-media.com/block/proxycheck.php?ip=%s", PlayerInfo[playerid][IP]);
		HTTP(playerid, HTTP_GET, str, "", "HTTP_OnPlayerProxyCheck");
	}
	AkaKontrol(playerid);
	mysql_format(Owsla, str, sizeof(str), "SELECT * FROM `bans` WHERE `kullanici` = '%e' OR `ip` = '%s' LIMIT 1", PlayerInfo[playerid][Name], PlayerInfo[playerid][IP]);
    new Cache:VeriCek = mysql_query(Owsla, str);
	if(cache_num_rows())
	{
	    new ban_Bitis, ban_Name[24], ban_Admin[24], ban_Sebep[56], ban_IP[16], ban_Durum;
	    
		cache_get_value_name(0, "kullanici", ban_Name, 24);
  		cache_get_value_int(0, "bitis", ban_Bitis);
  		cache_get_value_name(0, "sebep", ban_Sebep, 56);
    	cache_get_value_name(0, "admin", ban_Admin, 24);
    	cache_get_value_name(0, "ip", ban_IP, 16);
   		cache_get_value_int(0, "durum", ban_Durum);

		if(ban_Bitis > gettime())
		{
			format(str, sizeof str,  "{ffffff}Hesabınız yasaklanmış "ANA_RENK"%s\n\n\
									\t{ffffff}» Banlayan Admin: "ANA_RENK"%s\n\
									\t{ffffff}» Banlandığın IP: "ANA_RENK"%s\n\
									\t{ffffff}» Sebep: "ANA_RENK"%s\n\
									\t{ffffff}» Açılacağı tarih: "ANA_RENK"%s\n\
									\t{ffffff}» Kalan gün: "ANA_RENK"%d\n\
									\t{ffffff}» Nerede atıldı?: %s", ban_Name, ban_Admin, ban_IP, ban_Sebep, ReturnDate(ban_Bitis), (ban_Bitis - gettime())/86400, (ban_Durum == 0) ? ("{FF0000}Offline") : ("{00FF00}Online"));
			ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Süreli Ban", str, "Tamam", "");
			KickPlayer(playerid);
			cache_delete(VeriCek);
			return 1;
		}
	}else
	{
		mysql_format(Owsla, str, sizeof(str), "SELECT * FROM `oyuncular` WHERE `Name` = '%e' LIMIT 1", PlayerInfo[playerid][Name]);
		mysql_tquery(Owsla, str, "OnPlayerDataLoaded", "dd", playerid, g_MysqlRaceCheck[playerid]);
	}
	cache_delete(VeriCek);
    
	StopAudioStreamForPlayer(playerid);
	PlayAudioStreamForPlayer(playerid, "https://DL.dropbox.com/s/kyeskjd9t1fue5o/Owsla_Gaming_Intro_EXCISION.mp3");
    SetPlayerColor(playerid, PlayerColors[random(200)]);
    SendDeathMessage(INVALID_PLAYER_ID, playerid, 200);
    
    for(new i = 0; i < 20; i++) SendClientMessage(playerid, 0xFFFFFFFF, "");
    SendClientMessage(playerid, 0x93FF93FF,"Owsla Gaming {FFFFFF}Serverine Hoşgeldiniz");
    SendClientMessage(playerid, 0xFFFFFFFF, "Serveri "ANA_RENK"favorilere {FFFFFF}eklemeyi unutmayın!");
    format(str, sizeof(str), "Sunucu rekoru "ANA_RENK"%d/%d {FFFFFF}oyuncu!", ServerInfo[Rekor], GetMaxPlayers());
    SendClientMessage(playerid, 0xFFFFFFFF, str);
    
    LoadPlayerTextdraws(playerid);
	if(Iter_Count(Player) > ServerInfo[Rekor])
	{
  		ServerInfo[Rekor] = Iter_Count(Player);

		printf("Rekor » Sunucu yeni bir rekor kirdi. (%d/%d oyuncu ile)", Iter_Count(Player), GetMaxPlayers());
		GameTextForAll("~r~~h~Rekor!", 5000, 3);
		format(str, sizeof(str), "~y~~h~[Rekor] ~w~~h~Rekor kirildigi icin herkese %d$ + %d skor + %d exp verildi! ~r~~h~(%d/%d)", ServerInfo[Rekor]*5000, ServerInfo[Rekor]*5, ServerInfo[Rekor]*10, Iter_Count(Player), GetMaxPlayers());
 		TextMesaji(TurkceKarakter(str));
  		foreach(new i: Player)
   		{
	        GivePlayerCash(i, ServerInfo[Rekor]*5000);
	        GivePlayerScore(i, ServerInfo[Rekor]*5);
	        GivePlayerExp(i, ServerInfo[Rekor]*10);
    	}
		mysql_format(Owsla, str, sizeof(str), "UPDATE `server` SET `Rekor` = '%d'", ServerInfo[Rekor]);
		mysql_tquery(Owsla, str);
	}
	return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
    SendDeathMessage(INVALID_PLAYER_ID, playerid, 201);
	g_MysqlRaceCheck[playerid]++;
	SavePlayer(playerid);
	if(cache_is_valid(PlayerInfo[playerid][Cache_ID]))
	{
		cache_delete(PlayerInfo[playerid][Cache_ID]);
		PlayerInfo[playerid][Cache_ID] = MYSQL_INVALID_CACHE;
	}
	if(PlayerInfo[playerid][LoginTimer])
	{
		KillTimer(PlayerInfo[playerid][LoginTimer]);
		PlayerInfo[playerid][LoginTimer] = 0;
	}
	PlayerInfo[playerid][IsLoggedIn] = false;
	
	if(PlayerInfo[playerid][Araba] == true)
	{
		DestroyVehicle(PlayerInfo[playerid][Arabam]);
		PlayerInfo[playerid][Araba] = false;
	}
    foreach(new i: Spawnlar)
    {
        GangZoneHideForPlayer(playerid, SpawnInfo[i][spawnZone]);
    }
	return 1;
}
public OnPlayerSpawn(playerid)
{
    for(new i; i < MAX_ATTACHMENTS_PER_PLAYER; i++)
	{
		if(AttachInfo[playerid][i][used1] == true)
		{
			SetPlayerAttachedObject(playerid, AttachInfo[playerid][i][index1], AttachInfo[playerid][i][modelid1], AttachInfo[playerid][i][bone1], AttachInfo[playerid][i][fOffsetX1], AttachInfo[playerid][i][fOffsetY1], AttachInfo[playerid][i][fOffsetZ1], AttachInfo[playerid][i][fRotX1], AttachInfo[playerid][i][fRotY1], AttachInfo[playerid][i][fRotZ1], AttachInfo[playerid][i][fScaleX1], AttachInfo[playerid][i][fScaleY1], AttachInfo[playerid][i][fScaleZ1]);
		}
	}
	if(PlayerInfo[playerid][Dmde] == true)
	{
	    new id = PlayerInfo[playerid][DmID];
		ResetPlayerWeapons(playerid);
		SetPlayerPos(playerid, DmInfo[id][dPos][0], DmInfo[id][dPos][1], DmInfo[id][dPos][2]);
		SetPlayerInterior(playerid, DmInfo[id][dInt]);
		SetPlayerVirtualWorld(playerid, DmInfo[id][dWorld]);
		GivePlayerWeapon(playerid, DmInfo[id][dWeap1], 9999);
		GivePlayerWeapon(playerid, DmInfo[id][dWeap2], 9999);
		GivePlayerWeapon(playerid, DmInfo[id][dWeap3], 9999);
		SetPlayerHealth(playerid, DmInfo[id][dHP][0]);
		SetPlayerArmour(playerid, DmInfo[id][dHP][1]);
	    return 1;
	}
	new spawnID = Iter_Random(Spawnlar);
	SetPlayerPos(playerid, SpawnInfo[spawnID][spawnX], SpawnInfo[spawnID][spawnY], SpawnInfo[spawnID][spawnZ]);
	SetPlayerFacingAngle(playerid, SpawnInfo[spawnID][spawnA]), SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
	if(killerid != INVALID_PLAYER_ID)
	{
        if(PlayerInfo[playerid][FakeKill] != killerid) return KickReason(playerid, "Fake Kill", "Sistem");
        SendDeathMessage(killerid, playerid, reason);
	    PlayerInfo[killerid][Kills]++;
	    PlayerInfo[playerid][Deaths]++;
	}else
	if(killerid == INVALID_PLAYER_ID)
	{
	    SendDeathMessage(INVALID_PLAYER_ID, playerid, reason);
	    PlayerInfo[playerid][Deaths]++;
	}
	return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
		case DIALOG_UNUSED: return 1;
		case DIALOG_LOGIN:
		{
		    if(PlayerInfo[playerid][IsLoggedIn] == true) return KickReason(playerid, "Login Hack", "Sistem");
			if(!response) return Kick(playerid);
			new hashed_pass[65];
			SHA256_PassHash(inputtext, PlayerInfo[playerid][Salt], hashed_pass, 65);
			if(strcmp(hashed_pass, PlayerInfo[playerid][Password]) == 0)
			{
				Bilgi(playerid, "Bilgi » {FFFFFF}Basariyla hesabiniza giriş yaptınız!");
				cache_set_active(PlayerInfo[playerid][Cache_ID]);
				AssignPlayerData(playerid);
				cache_delete(PlayerInfo[playerid][Cache_ID]);
				PlayerInfo[playerid][Cache_ID] = MYSQL_INVALID_CACHE;
	 	 		KillTimer(PlayerInfo[playerid][LoginTimer]), PlayerInfo[playerid][LoginTimer] = 0;
				PlayerInfo[playerid][IsLoggedIn] = true;
				
				if(PlayerInfo[playerid][Banned] == 1) return BanReason(playerid, "N-Ban", "Sistem");
				VipSureKontrol(playerid);
				new query[128];
				mysql_format(Owsla, query, sizeof(query), "SELECT * FROM `objects` WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				mysql_tquery(Owsla, query, "OnObjectLoad", "d", playerid);

				mysql_format(Owsla, query, sizeof(query), "SELECT * FROM `medals` WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][UserID]);
				mysql_tquery(Owsla, query, "LoadMedals", "d", playerid);
			}else
			{
				PlayerInfo[playerid][LoginAttempts]++;
				if(PlayerInfo[playerid][LoginAttempts] >= 3) return KickReason(playerid, "Hatali Giris", "Sistem");
				ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""ANA_RENK"Owsla Gaming - {FFFFFF}Giris", "{FFFFFF}Yanlis sifre, lütfen doğru şifreyi giriniz", "Giris", "Cikis");
			}
		}
		case DIALOG_REGISTER:
		{
		    if(PlayerInfo[playerid][IsLoggedIn] == true) return KickReason(playerid, "Register Hack", "Sistem");
			if(!response) return Kick(playerid);
			if(strlen(inputtext) <= 5) return ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""ANA_RENK"Owsla Gaming - {FFFFFF}Kayıt", "{FFFFFF}Sifreniz 5 karakterden uzun olmalıdır, lütfen farklı bir şifre giriniz.", "Kayit", "Cikis");
			for(new i = 0; i < 16; i++) PlayerInfo[playerid][Salt][i] = random(94) + 33;
			SHA256_PassHash(inputtext, PlayerInfo[playerid][Salt], PlayerInfo[playerid][Password], 65);
			new query[256];
			mysql_format(Owsla, query, sizeof(query), "INSERT INTO `oyuncular` (`Name`, `Password`, `Salt`) VALUES ('%e', '%s', '%e')", PlayerInfo[playerid][Name], PlayerInfo[playerid][Password], PlayerInfo[playerid][Salt]);
			mysql_tquery(Owsla, query, "OnPlayerRegister", "d", playerid);
		}
		case DIALOG_CONFIG:
		{
		    if(response)
		    {
		        switch(listitem)
				{
				    case 0: ShowPlayerDialog(playerid, DIALOG_CONFIG_PING, DIALOG_STYLE_INPUT, ""ANA_RENK"Owsla Gaming - {FFFFFF}Max Ping", "{FFFFFF}Max pingi değitirmek için aşağıya değer giriniz.", "Degistir", "Geri");
					case 1: ShowPlayerDialog(playerid, DIALOG_CONFIG_TIME, DIALOG_STYLE_INPUT, ""ANA_RENK"Owsla Gaming - {FFFFFF}Time", "{FFFFFF}Server saatini değitirmek için aşağıya değer giriniz.", "Degistir", "Geri");
					case 2: ShowPlayerDialog(playerid, DIALOG_CONFIG_WEATHER, DIALOG_STYLE_INPUT, ""ANA_RENK"Owsla Gaming - {FFFFFF}Weather", "{FFFFFF}Server havasını değitirmek için aşağıya değer giriniz.", "Degistir", "Geri");
					case 3:
					{
					    switch(ServerInfo[Headshot])
					    {
					        case 0:
					        {
					            ServerInfo[Headshot] = 1;
								new str[128];
								mysql_tquery(Owsla, "UPDATE `server` SET `Headshot` = '1'");
								format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici headshoti aktif etti.", PlayerInfo[playerid][Name]);
								TextMesaji(TurkceKarakter(str));
								ShowConfigDialog(playerid);
					        }
					        case 1:
					        {
					            ServerInfo[Headshot] = 0;
								new str[128];
								mysql_tquery(Owsla, "UPDATE `server` SET `Headshot` = '0'");
								format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici headshoti deaktif etti.", PlayerInfo[playerid][Name]);
								TextMesaji(TurkceKarakter(str));
								ShowConfigDialog(playerid);
					        }
					    }
					}
					case 4:
					{
						switch(ServerInfo[Kilit])
						{
						    case true:
						    {
						        SendRconCommand("password 0");
						        ServerInfo[Kilit] = false;
								new str[128];
								format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici serverin kilidini acti.", PlayerInfo[playerid][Name]);
								TextMesaji(TurkceKarakter(str));
								ShowConfigDialog(playerid);
						    }
						    case false:
						    {
						        ShowPlayerDialog(playerid, DIALOG_CONFIG_LOCK, DIALOG_STYLE_INPUT, ""ANA_RENK"Owsla Gaming - {FFFFFF}Server Kilit", "{FFFFFF}Serveri kilitlemek için aşağıya istediğiniz şifreyi girin!", "Kilitle", "Geri");
						    }
						}
					}
					case 5:
					{
					    switch(ServerInfo[AntiProxy])
					    {
					        case 0:
					        {
					            ServerInfo[AntiProxy] = 1;
								new str[128];
								mysql_tquery(Owsla, "UPDATE `server` SET `AntiProxy` = '1'");
								format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici antiproxy aktif etti.", PlayerInfo[playerid][Name]);
								TextMesaji(TurkceKarakter(str));
								ShowConfigDialog(playerid);

								foreach(new i: Player)
								{
									format(str, sizeof(str), "proxy.mind-media.com/block/proxycheck.php?ip=%s", PlayerInfo[i][IP]);
									HTTP(i, HTTP_GET, str, "", "HTTP_OnPlayerProxyCheck");
							    }
					        }
					        case 1:
					        {
					            ServerInfo[AntiProxy] = 0;
								new str[128];
								mysql_tquery(Owsla, "UPDATE `server` SET `AntiProxy` = '0'");
								format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici antiproxy deaktif etti.", PlayerInfo[playerid][Name]);
								TextMesaji(TurkceKarakter(str));
								ShowConfigDialog(playerid);
					        }
					    }
					}
					case 6:
					{
					    switch(ServerInfo[Chat])
					    {
					        case false:
					        {
					            ServerInfo[Chat] = true;
					            new str[128];
								format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici ana chati aktif etti.", PlayerInfo[playerid][Name]);
								TextMesaji(TurkceKarakter(str));
					        }
					        case true:
					        {
					            ServerInfo[Chat] = false;
					            new str[128];
								format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici ana chati deaktif etti.", PlayerInfo[playerid][Name]);
								TextMesaji(TurkceKarakter(str));
					        }
						}
						ShowConfigDialog(playerid);
					}
				}
		    }
		}
		case DIALOG_CONFIG_PING:
		{
		    if(!response) return ShowConfigDialog(playerid);
			ServerInfo[MaxPing] = strval(inputtext);
			new str[128];
			mysql_format(Owsla, str, sizeof(str), "UPDATE `server` SET `MaxPing` = '%d'", ServerInfo[MaxPing]);
			mysql_tquery(Owsla, str);
			format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici max pingi degistirdi (~y~%d~w~~h~~h~)", PlayerInfo[playerid][Name], ServerInfo[MaxPing]);
			TextMesaji(TurkceKarakter(str));
			ShowConfigDialog(playerid);
		}
		case DIALOG_CONFIG_TIME:
		{
		    if(!response) return ShowConfigDialog(playerid);
			ServerInfo[Time] = strval(inputtext);
			new str[128];
			mysql_format(Owsla, str, sizeof(str), "UPDATE `server` SET `Time` = '%d'", ServerInfo[Time]);
			mysql_tquery(Owsla, str);
			format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici server saatini degistirdi (~y~%d~w~~h~~h~)", PlayerInfo[playerid][Name], ServerInfo[Time]);
			TextMesaji(TurkceKarakter(str));
			SetWorldTime(ServerInfo[Time]);
			ShowConfigDialog(playerid);
		}
		case DIALOG_CONFIG_WEATHER:
		{
		    if(!response) return ShowConfigDialog(playerid);
			ServerInfo[Weather] = strval(inputtext);
			new str[128];
			mysql_format(Owsla, str, sizeof(str), "UPDATE `server` SET `Weather` = '%d'", ServerInfo[Weather]);
			mysql_tquery(Owsla, str);
			format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici server havasini degistirdi (~y~%d~w~~h~~h~)", PlayerInfo[playerid][Name], ServerInfo[Weather]);
			TextMesaji(TurkceKarakter(str));
			SetWeather(ServerInfo[Weather]);
			ShowConfigDialog(playerid);
		}
		case DIALOG_CONFIG_LOCK:
		{
		    if(!response) return ShowConfigDialog(playerid);
			if(strlen(inputtext) > 10) return ShowPlayerDialog(playerid, DIALOG_CONFIG_LOCK, DIALOG_STYLE_INPUT, ""ANA_RENK"Owsla Gaming - {FFFFFF}Server Kilit", "{FFFFFF}Serveri kilitlemek için aşağıya istediğiniz şifreyi girin!\nMax 10 karakter!", "Kilitle", "Geri");
            ServerInfo[Kilit] = true;
			new str[128];
			format(str, sizeof(str), "password %s", inputtext);
			SendRconCommand(str);
			format(str, sizeof(str), "~p~~h~[Config] ~w~~h~~h~%s isimli yonetici serveri kilitledi.", PlayerInfo[playerid][Name]);
			TextMesaji(TurkceKarakter(str));
			ShowConfigDialog(playerid);
		}
		case DIALOG_SETTINGS:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						switch(PlayerInfo[playerid][PMengel])
						{
						    case true:
							{
								PlayerInfo[playerid][PMengel] = false;
								Bilgi(playerid, "Bilgi » {FFFFFF}Özel mesaj durumunuz pasif hale getirildi.");
						    }
						    case false:
						    {
								PlayerInfo[playerid][PMengel] = true;
								Bilgi(playerid, "Bilgi » {FFFFFF}Özel mesaj durumunuz aktif hale getirildi.");
						    }
						}
						ShowSettingsDialog(playerid);
		            }
		        }
		    }
		}
		case DIALOG_UNBAN:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0: mysql_tquery(Owsla, "SELECT `kullanici`, FROM_UNIXTIME(bitis, '%Y-%m-%d'), ip FROM `bans` WHERE bitis > UNIX_TIMESTAMP(CURRENT_TIMESTAMP)", "CheckSBanList", "d", playerid);
				case 1: mysql_tquery(Owsla, "SELECT `Name` FROM `oyuncular` WHERE `Banned` = '1'", "CheckNBanList", "d", playerid);
				case 2: mysql_tquery(Owsla, "SELECT * FROM `blockip` WHERE UNIX_TIMESTAMP(`times`) > (UNIX_TIMESTAMP(NOW())-10800)", "CheckIpBanList", "d", playerid);
			}
		}
		case DIALOG_UNSBAN:
		{
		    if(!response)return 1;
			new varname[32], playername[24], ipadress[16], str[128];
			format(varname, sizeof(varname), "SBanOpName_%d", listitem);
			GetPVarString(playerid, varname, playername, 24);
			format(varname, sizeof(varname), "SBanOpIP_%d", listitem);
			GetPVarString(playerid, varname, ipadress, 16);
			if(strlen(ipadress))
			{
				UnBlockIpAddress(ipadress);
				mysql_format(Owsla, str, sizeof(str), "DELETE FROM `blockip` WHERE `ip` = '%s'", ipadress);
				mysql_tquery(Owsla, str);
			}
			mysql_format(Owsla, str, sizeof(str), "DELETE FROM `bans` WHERE `kullanici` = '%e'", playername);
			mysql_tquery(Owsla, str);
			format(str, sizeof(str), "Bilgi » {FFFFFF}%s isimli oyuncunun sbanı kaldırıldı.", playername);
			Bilgi(playerid, str);
		}
		case DIALOG_UNNBAN:
		{
		    if(!response)return 1;
			new varname[32], playername[25], str[128];
			format(varname,32,"NBanOpName_%d",listitem);
			GetPVarString(playerid, varname, playername, 25);
			mysql_format(Owsla, str, 256, "UPDATE `oyuncular` SET `Banned` = '0' WHERE `Name` = '%e'", playername);
			mysql_tquery(Owsla, str);
			format(str, sizeof(str), "Bilgi » {FFFFFF}%s isimli oyuncunun nbanı kaldırıldı.", playername);
			Bilgi(playerid, str);
		}
		case DIALOG_UNIPBAN:
		{
		    if(!response)return 1;
			new ipadress[16], varname[32], str[128];
			format(varname, sizeof(varname), "IpBlockOp_%d",listitem);
			GetPVarString(playerid, varname, ipadress, 16);
			UnBlockIpAddress(ipadress);
			mysql_format(Owsla, str, sizeof(str), "DELETE FROM `blockip` WHERE `ip` = '%e'", ipadress);
			mysql_tquery(Owsla, str);
			format(str, sizeof(str), "Bilgi » {FFFFFF}%s Ip adresinin engeli kaldırıldı.", ipadress);
			Bilgi(playerid, str);
		}
	    case DIALOG_OBJECTS:
	    {
	        if(!response) return 0;
         	new str[16];
 			inindex[playerid] = listitem;
			if(AttachInfo[playerid][listitem][used1] == false) return ShowModelSelectionMenuEx(playerid, AttachmentObjectsList, sizeof(AttachmentObjectsList), "Obje Secin", 1);
			format(str, sizeof(str), ""ANA_RENK"Owsla Gaming - {FFFFFF}Attachments (Slot %d)", listitem+1);
			ShowPlayerDialog(playerid, DIALOG_OBJECTS1, DIALOG_STYLE_MSGBOX, str, "{FFFFFF}Seçtiğiniz slottaki objeyi düzenliyebilir veya kaldırabilirsiniz", "Duzenle", "Kaldır");
		}
		case DIALOG_OBJECTS1:
		{
			if(response) return EditAttachedObject(playerid, inindex[playerid]);
			RemovePlayerAttachedObject(playerid, inindex[playerid]);
			AttachInfo[playerid][inindex[playerid]][used1] = false;
			new str[144];
			Bilgi(playerid, "Bilgi » {FFFFFF}Seçtiğiniz objeyi kaldırdınız.");
			mysql_format(Owsla, str, sizeof(str), "DELETE FROM `objects` WHERE `UserID` = '%d' AND `Index` = '%d'", PlayerInfo[playerid][UserID], inindex[playerid]);
			mysql_tquery(Owsla, str);
		}
		case DIALOG_OBJECTS2:
		{
			if(response)
			{
				SetPlayerAttachedObject(playerid, inindex[playerid], inmodel[playerid], listitem+1);
				AttachInfo[playerid][inindex[playerid]][index1] = inindex[playerid];
		 		AttachInfo[playerid][inindex[playerid]][modelid1] = inmodel[playerid];
		 		AttachInfo[playerid][inindex[playerid]][bone1] = listitem+1;
		 		AttachInfo[playerid][inindex[playerid]][used1] = true;
				EditAttachedObject(playerid, inindex[playerid]);
			}
		}
		case DIALOG_BUGRAPORLAR:
		{
			if(!response)
			{
			    PlayerInfo[playerid][ListPage]--;
				if(PlayerInfo[playerid][ListPage] < 0)
				{
					PlayerInfo[playerid][ListPage] = 0;
					return 1;
				}
			}else
			{
			    PlayerInfo[playerid][ListPage]++;
			}
			new str[128];
		    mysql_format(Owsla, str, sizeof(str), "SELECT `RaporID`, `Raporlayan`, `RaporTarih`, `Rapor` FROM `raporlar` ORDER BY RaporID ASC LIMIT %d, 10", PlayerInfo[playerid][ListPage]*10);
		    new Cache:VeriCek = mysql_query(Owsla, str);
		    new rows = cache_num_rows();
		    if(rows)
		    {
		        new dialog[1024], reporter[25], reportid, reportedon, reportreason[125];
		        format(dialog, sizeof(dialog),""ANA_RENK"#\t"ANA_RENK"Rapor Eden\t"ANA_RENK"Zaman\t"ANA_RENK"Rapor\n");
		        for(new i = 0; i < rows; i++)
		        {
		            cache_get_value_name_int(i, "RaporID", reportid);
		            cache_get_value_name(i, "Raporlayan", reporter);
		            cache_get_value_name_int(i, "RaporTarih", reportedon);
		            cache_get_value_name(i, "Rapor", reportreason);
		            format(dialog, sizeof(dialog),"%s"ANA_RENK"%02d)\t{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\n", dialog, reportid, reporter, ReturnDate(reportedon), reportreason);
		        }
		        ShowPlayerDialog(playerid, DIALOG_BUGRAPORLAR, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}Bug Rapor", dialog, "Ileri", "Geri");
		    }else
			{
			    PlayerInfo[playerid][ListPage] = 0;
		 		Hata(playerid, "Hata » {FFFFFF}Daha fazla bug rapor bulunmamakta.");
		    }
			cache_delete(VeriCek);
		}
	    case DIALOG_UPDATES:
	    {
			if(!response)
			{
			    PlayerInfo[playerid][ListPage]--;
				if(PlayerInfo[playerid][ListPage] < 0)
				{
					PlayerInfo[playerid][ListPage] = 0;
					return 1;
				}
			}else
			{
			    PlayerInfo[playerid][ListPage]++;
			}
			new str[128];
		    mysql_format(Owsla, str, sizeof(str), "SELECT `UpdateID`, `Update` FROM `Updates` ORDER BY UpdateID ASC LIMIT %d, 15", PlayerInfo[playerid][ListPage]*15);
		    new Cache:VeriCek = mysql_query(Owsla, str);
		    new rows = cache_num_rows();
		    if(rows)
		    {
		        new dialog[1024], upID, updatee[125];
		        for(new i = 0; i < rows; i++)
		        {
		            cache_get_value_name_int(i, "UpdateID", upID);
		            cache_get_value_name(i, "Update", updatee);
		            format(dialog, sizeof(dialog),"%s"ANA_RENK"%d) {FFFFFF}%s\n", dialog, upID, updatee);
		        }
		        ShowPlayerDialog(playerid, DIALOG_UPDATES, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Updates", dialog, "Ileri", "Geri");
		    }else
			{
			    PlayerInfo[playerid][ListPage] = 0;
		 		Hata(playerid, "Hata » {FFFFFF}Daha fazla güncelleme bulunmamakta.");
		    }
			cache_delete(VeriCek);
	    }
		case DIALOG_DMS:
		{
			if(response)
			{
			    new str[12];
			    format(str, sizeof(str), "%d", listitem);
                callcmd::dm(playerid, str);
			}
		}
		case DIALOG_SPAWNS:
		{
		    if(response)
		    {
		        new spawnID = listitem;
				SetPlayerPos(playerid, SpawnInfo[spawnID][spawnX], SpawnInfo[spawnID][spawnY], SpawnInfo[spawnID][spawnZ]);
				SetPlayerFacingAngle(playerid, SpawnInfo[spawnID][spawnA]), SetCameraBehindPlayer(playerid);
		    }
		}
	}
	return 1;
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == 1)
	{
	    if(response)
	    {
	        inmodel[playerid] = modelid;
		    ShowPlayerDialog(playerid, DIALOG_OBJECTS2, DIALOG_STYLE_LIST, ""ANA_RENK"Owsla Gaming - {FFFFFF}Attachments", "Bel\nBas\nSol Üst Kol\nSağ Üst Kol\nSol El\nSağ El\nSol Kısım\nSağ Kısım\nSol Ayak\nSağ Ayak\nSol Baldır\nSağ Baldır\nSol Ön Kol\nSağ Ön Kol\nSol Omuz\nSağ Omuz\nBoyun\nÇene", "Seç", "Iptal");
		}
	}
	return 1;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
	{
        fScaleX = (fScaleX < 0.25) ? (0.25) : ((fScaleX > 3.00) ? (3.00) : (fScaleX));
		fScaleY = (fScaleY < 0.25) ? (0.25) : ((fScaleY > 3.00) ? (3.00) : (fScaleY));
		fScaleZ = (fScaleZ < 0.25) ? (0.25) : ((fScaleZ > 3.00) ? (3.00) : (fScaleZ));
        AttachInfo[playerid][index][fOffsetX1] = fOffsetX;
        AttachInfo[playerid][index][fOffsetY1] = fOffsetY;
        AttachInfo[playerid][index][fOffsetZ1] = fOffsetZ;
        AttachInfo[playerid][index][fRotX1] = fRotX;
        AttachInfo[playerid][index][fRotY1] = fRotY;
        AttachInfo[playerid][index][fRotZ1] = fRotZ;
        AttachInfo[playerid][index][fScaleX1] = fScaleX;
        AttachInfo[playerid][index][fScaleY1] = fScaleY;
        AttachInfo[playerid][index][fScaleZ1] = fScaleZ;
	}
	new query[144];
    Bilgi(playerid, "Bilgi » {FFFFFF}Obje kaydedildi.");
    SetPlayerAttachedObject(playerid, index, modelid, boneid, AttachInfo[playerid][index][fOffsetX1], AttachInfo[playerid][index][fOffsetY1], AttachInfo[playerid][index][fOffsetZ1], AttachInfo[playerid][index][fRotX1], AttachInfo[playerid][index][fRotY1], AttachInfo[playerid][index][fRotZ1], AttachInfo[playerid][index][fScaleX1], AttachInfo[playerid][index][fScaleY1], AttachInfo[playerid][index][fScaleZ1]);
	mysql_format(Owsla, query, sizeof(query), "SELECT * FROM `objects` WHERE `Index` = '%d' AND `UserID` = '%d'", index, PlayerInfo[playerid][UserID]);
	mysql_tquery(Owsla, query, "OnObjectSave", "iiii", playerid, index, modelid, boneid);
	return 1;
}
public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
    if(issuerid != INVALID_PLAYER_ID)
    {
        if(IsPlayerPaused(playerid)) return 0;
		if(PlayerInfo[playerid][SpawnBolgesinde] == true)
		{
        	Hata(issuerid, "Hata » {FFFFFF}Vurmuş olduğunuz oyuncunu spawn bölgesinde.");
	    	return 0;
		}
		if(PlayerInfo[playerid][SpawnBolgesinde] == true)
		{
        	Hata(issuerid, "Hata » {FFFFFF}Spawn bölgesinde kimseye vuramazsınız.");
			return 0;
		}
		if(PlayerInfo[playerid][God] == true)
		{
		    Bilgi(issuerid, "Bilgi » {FFFFFF}Vurmuş olduğunuz oyuncunun GOD özelliği bulunmakta.");
			return 0;
		}
		if(PlayerInfo[issuerid][God] == true)
		{
		    Bilgi(issuerid, "Bilgi » {FFFFFF}GOD özelliğiniz aktif iken kimseye vuramazsınız.");
			return 0;
		}
		if(ServerInfo[Headshot] == 1 && weapon == 34 && bodypart == 9)
		{
			GameTextForPlayer(issuerid, "~g~HeadShot", 2000, 1);
			GameTextForPlayer(playerid, "~r~HeadShot", 2000, 1);
			amount = 0.0;
		}
		if(IsValidWeapon(weapon)) PlayerInfo[playerid][YaraliTime] = GetTickCount() + 3000;
		PlayerInfo[playerid][FakeKill] = issuerid;
	}else
	if(issuerid == INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[playerid][God] == true) return 0;
	}
	return 1;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(weaponid < 22 || weaponid > 38) return KickReason(playerid, "Crasher", "Sistem");
	new Float:zzz; GetPlayerPos(playerid, zzz, zzz, zzz);
	if(!(-20000.0 <= zzz <= 20000.0)) return KickReason(playerid, "Crasher 2", "Sistem");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
    {
		if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER && GetPlayerWeapon(playerid) != weaponid) return KickReason(playerid, "Crasher 3", "Sistem");
    }
    if((!(BULLET_HIT_TYPE_NONE <= hittype <= BULLET_HIT_TYPE_PLAYER_OBJECT) || weaponid != 38 && !(22 <= weaponid <= 34))) return KickReason(playerid, "Crasher 4", "Sistem");

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    if(!DriverCheck(GetPlayerVehicleID(playerid)))
	    {
	        GameTextForPlayer(playerid, "~r~~h~~h~Drive by yasaktir!", 3000, 3);
            SetPlayerArmedWeapon(playerid, 0);
	    }
	}
    return 1;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	foreach(new i: Spawnlar)
	{
		if(areaid == SpawnInfo[i][spawnArea])
		{
		    Bilgi(playerid, "Bilgi » {FFFFFF}Spawn alanına girdiniz. Bu alanda kimseye vuramaz, araçla giremezsiniz.");
			PlayerInfo[playerid][SpawnBolgesinde] = true;
			PlayerInfo[playerid][SpawnID] = i;
			GangZoneFlashForPlayer(playerid, PlayerInfo[playerid][SpawnID], 0xFF990066);
		    if(IsPlayerInAnyVehicle(playerid)) SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
	}
	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	foreach(new i: Spawnlar)
	{
		if(areaid == SpawnInfo[i][spawnArea])
		{
            GangZoneStopFlashForAll(PlayerInfo[playerid][SpawnID]);
		    PlayerInfo[playerid][SpawnID] = -1;
		    Bilgi(playerid, "Bilgi » {FFFFFF}Spawn alanından çıktınız.");
		    PlayerInfo[playerid][SpawnBolgesinde] = false;
		}
	}
	return 1;
}
public OnPlayerUpdate(playerid)
{
    if(GetPlayerMoney(playerid) != PlayerInfo[playerid][AntiCash])
	{
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, PlayerInfo[playerid][AntiCash]);
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new Float:L_update[4], total_speed, str[24];
		GetVehicleVelocity(GetPlayerVehicleID(playerid), L_update[0], L_update[1], L_update[2]) ;
		L_update[3] = floatsqroot(floatpower(floatabs(L_update[0]), 2.0) + floatpower (floatabs(L_update[1]), 2.0) + floatpower(floatabs(L_update[2]), 2.0)) * 14.0;
		total_speed = floatround(L_update[3]);
		for(new i; i != 16; i++)
		{
			if(i < total_speed)
			{
				PlayerTextDrawColor(playerid, HizBar[playerid][i], S_Color[i]);
			}else
			{
				PlayerTextDrawColor(playerid, HizBar[playerid][i], 0x66666644);
			}
			PlayerTextDrawShow(playerid, HizBar[playerid][i]);
		}
		format(str, sizeof(str),"~w~~h~~h~%d",GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		PlayerTextDrawSetString(playerid, HizText[playerid], str);
	}
	return 1;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER)
 	{
 	    PlayerTextDrawShow(playerid, HizBox[playerid]), PlayerTextDrawShow(playerid, HizText[playerid]);
		for(new i; i != 16; i++)
		{
			PlayerTextDrawColor(playerid, HizBar[playerid][i], 0x66666644), PlayerTextDrawShow(playerid, HizBar[playerid][i]);
		}
	}else
	{
		for(new i; i != 16; i++)
		{
			PlayerTextDrawHide(playerid, HizBar[playerid][i]);
		}
		PlayerTextDrawHide(playerid, HizBox[playerid]), PlayerTextDrawHide(playerid, HizText[playerid]);
	}
	return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_CTRL_BACK && PlayerInfo[playerid][SpawnBolgesinde] == true)
	{
	    if(SureYasagi(playerid, "hkey", 60)) return 1;
	    GameTextForPlayer(playerid, "~r~~h~~h~Can ~w~~h~~h~+ ~g~~h~~h~Zirh", 1000, 3);
	    SetPlayerHealth(playerid, 100.0);
	    SetPlayerArmour(playerid, 100.0);
	}
	return 1;
}
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerState(playerid) == PLAYER_STATE_NONE)
	{
	    Hata(playerid, "Hata » {FFFFFF}Spawn olmadan komut kullanamazsınız.");
	    return 0;
	}
	if(GetTickCount() < PlayerInfo[playerid][YaraliTime])
 	{
		new str[128];
    	format(str, sizeof(str),"Hata » {FFFFFF}Yarali iken komut kullanamazsın. (%d Saniye)", ConvertTimer(PlayerInfo[playerid][YaraliTime] - GetTickCount()));
		Hata(playerid, str);
 		return 0;
	}
    if(flags != CMD_ADMIN)
    {
        if(PlayerInfo[playerid][Dmde] == true)
		{
		    Hata(playerid, "Hata » {FFFFFF}Su an dmde bulunuyorsunuz. Cikmak icin /dmcik yazin.");
	 		return 0;
    	}
	}
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
    if(result == -1)
	{
	    HataliKomut(playerid, cmd);
		return 0;
    }
    GiveMedal(playerid, 2);
	return 1;
}
public OnPlayerText(playerid, text[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerState(playerid) == PLAYER_STATE_NONE)
	{
	    Hata(playerid, "Hata » {FFFFFF}Spawn olmadan konuşamazsınız.");
	    return 0;
	}
	GiveMedal(playerid, 1);
    new str[256];
    if(text[0] == '#' && (PlayerInfo[playerid][Admin] >= 1 || IsPlayerAdmin(playerid)))
	{
		format(str, sizeof(str),"Admin Chat » {a3ddee}%s(%i): {FFFFFF}%s", PlayerInfo[playerid][Name], playerid, text[1]);
		foreach(new i: Player) if(PlayerInfo[i][Admin] >= 1 || IsPlayerAdmin(i)) SendClientMessage(i, 0xAFAFAFFF, str);
        printf("[admin chat] [%s]: %s", PlayerInfo[playerid][Name], text);
	    return 0;
	}
	if(text[0] == '$' && (PlayerInfo[playerid][Admin] >= 1 || PlayerInfo[playerid][Anim] >= 1 || IsPlayerAdmin(playerid)))
	{
		format(str, sizeof(str),"Anim Chat » {a3ddee}%s(%i): {FFFFFF}%s", PlayerInfo[playerid][Name], playerid, text[1]);
		foreach(new i: Player) if(PlayerInfo[i][Anim] >= 1 || PlayerInfo[i][Admin] >= 1 || IsPlayerAdmin(i)) SendClientMessage(i, 0xAFAFAFFF, str);
    	printf("[anim chat] [%s]: %s", PlayerInfo[playerid][Name], text);
	    return 0;
	}
	if(text[0] == '+' && (PlayerInfo[playerid][Admin] >= 1 || PlayerInfo[playerid][DJ] >= 1 || IsPlayerAdmin(playerid)))
	{
		format(str, sizeof(str),"DJ Chat » {a3ddee}%s(%i): {FFFFFF}%s", PlayerInfo[playerid][Name], playerid, text[1]);
		foreach(new i: Player) if(PlayerInfo[i][DJ] >= 1 || PlayerInfo[i][Admin] >= 1 || IsPlayerAdmin(i)) SendClientMessage(i, 0xAFAFAFFF, str);
    	printf("[dj chat] [%s]: %s", PlayerInfo[playerid][Name], text);
	    return 0;
	}
	if(text[0] == '-' && (PlayerInfo[playerid][Admin] >= 1 || PlayerInfo[playerid][VIP] >= 1 || IsPlayerAdmin(playerid)))
	{
		format(str, sizeof(str),"VIP Chat » {a3ddee}%s(%i): {FFFFFF}%s", PlayerInfo[playerid][Name], playerid, text[1]);
		foreach(new i: Player) if(PlayerInfo[i][VIP] >= 1 || PlayerInfo[i][Admin] >= 1 || IsPlayerAdmin(i)) SendClientMessage(i, 0xAFAFAFFF, str);
    	printf("[vip chat] [%s]: %s", PlayerInfo[playerid][Name], text);
	    return 0;
	}
	if(IsPlayerAdmin(playerid))
	{
  		format(str, sizeof(str),"« {FFFFFF}RCON{%06x} » %s({FFFFFF}%i{%06x}): {FFFFFF}%s", GetPlayerColor(playerid) >>> 8, PlayerInfo[playerid][Name], playerid, GetPlayerColor(playerid) >>> 8, ColouredText(text));
  		SendClientMessageToAll(GetPlayerColor(playerid), str);
		printf("[chat] [%s]: %s", PlayerInfo[playerid][Name], text);
	    return 0;
	}
 	if(PlayerInfo[playerid][Admin] >= 1)
 	{
  		format(str, sizeof(str),"« {FFFFFF}GM{%06x} » %s({FFFFFF}%i{%06x}): {FFFFFF}%s", GetPlayerColor(playerid) >>> 8, PlayerInfo[playerid][Name], playerid, GetPlayerColor(playerid) >>> 8, ColouredText(text));
  		SendClientMessageToAll(GetPlayerColor(playerid), str);
		printf("[chat] [%s]: %s", PlayerInfo[playerid][Name], text);
        return 0;
	}
	if(ServerInfo[Chat] == false)
	{
	    Hata(playerid, "Hata » {FFFFFF}Ana chat admin tarafından kapatılmış.");
	    return 0;
	}
	if(PlayerInfo[playerid][Anim] >= 1)
	{
  		format(str, sizeof(str),"« {FFFFFF}ANM{%06x} » %s({FFFFFF}%i{%06x}): {FFFFFF}%s", GetPlayerColor(playerid) >>> 8, PlayerInfo[playerid][Name], playerid, GetPlayerColor(playerid) >>> 8, ColouredText(text));
 		SendClientMessageToAll(GetPlayerColor(playerid), str);
		printf("[chat] [%s]: %s", PlayerInfo[playerid][Name], text);
        return 0;
	}
	if(PlayerInfo[playerid][DJ] >= 1)
	{
  		format(str, sizeof(str),"« {FFFFFF}DJ{%06x} » %s({FFFFFF}%i{%06x}): {FFFFFF}%s",GetPlayerColor(playerid) >>> 8, PlayerInfo[playerid][Name], playerid, GetPlayerColor(playerid) >>> 8, ColouredText(text));
 		SendClientMessageToAll(GetPlayerColor(playerid), str);
		printf("[chat] [%s]: %s", PlayerInfo[playerid][Name], text);
        return 0;
	}
	if(PlayerInfo[playerid][VIP] >= 1)
	{
  		format(str, sizeof(str),"« {FFFFFF}VIP{%06x} » %s({FFFFFF}%i{%06x}): {FFFFFF}%s",GetPlayerColor(playerid) >>> 8, PlayerInfo[playerid][Name], playerid, GetPlayerColor(playerid) >>> 8, ColouredText(text));
 		SendClientMessageToAll(GetPlayerColor(playerid), str);
		printf("[chat] [%s]: %s", PlayerInfo[playerid][Name], text);
        return 0;
	}
	if(GetTickCount() < PlayerInfo[playerid][TalkTime])
	{
    	format(str, sizeof(str),"Hata » {FFFFFF}Tekrar konuşmak için {FF0000}%d {FFFFFF}saniye beklemelisin.", ConvertTimer(PlayerInfo[playerid][TalkTime] - GetTickCount()));
		Hata(playerid, str);
 		return 0;
	}
	format(str, sizeof(str),"%s(%i): {FFFFFF}%s", PlayerInfo[playerid][Name], playerid, text);
    SendClientMessageToAll(GetPlayerColor(playerid), str);
	SetPlayerChatBubble(playerid, text, GetPlayerColor(playerid), 100.0, 10000);

	printf("[chat] [%s]: %s", PlayerInfo[playerid][Name], text);
    PlayerInfo[playerid][TalkTime] = GetTickCount() + 4000;
 	return 0;
}
// Level 10
flags:makeadmin(CMD_ADMIN);
CMD:makeadmin(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    new level, id;
	if(sscanf(params, "ui", id, level)) return Kullanim(playerid, "Kullanim » {FFFFFF}/makeadmin <Player/ID> <Level>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(level < 0 || level > 10) return Hata(playerid, "Hata » {FFFFFF}Maximum level 10, minimum level 0 girebilirsiniz!");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[100];
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s sizi %i seviye yonetici yapti.",  PlayerInfo[playerid][Name], level);
	Bilgi(id, str);
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s isimli oyuncuyu %i seviye yonetici yaptiniz.",  PlayerInfo[id][Name], level);
	Bilgi(playerid, str);
	PlayerInfo[id][Admin] = level;
	PlayerInfo[id][Anim] = 0;
	PlayerInfo[id][DJ] = 0;
	PlayerInfo[id][VIP] = 0;
	return 1;
}

flags:makeanim(CMD_ADMIN);
CMD:makeanim(playerid, params[])
{
	if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    new level, id;
	if(sscanf(params, "ui", id, level)) return Kullanim(playerid, "Kullanim » {FFFFFF}/makeanim <Player/ID> <Level>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(level < 0 || level > 5) return Hata(playerid, "Hata » {FFFFFF}Maximum level 5, minimum level 0 girebilirsiniz!");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[100];
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s sizi %i seviye animator yapti.",  PlayerInfo[playerid][Name], level);
	Bilgi(id, str);
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s isimli oyuncuyu %i seviye animator yaptiniz.",  PlayerInfo[id][Name], level);
	Bilgi(playerid, str);
	PlayerInfo[id][Anim] = level;
	PlayerInfo[id][Admin] = 0;
	PlayerInfo[id][DJ] = 0;
	PlayerInfo[id][VIP] = 0;
	return 1;
}

flags:makedj(CMD_ADMIN);
CMD:makedj(playerid, params[])
{
	if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    new level, id;
	if(sscanf(params, "ui", id, level)) return Kullanim(playerid, "Kullanim » {FFFFFF}/makedj <Player/ID> <Level>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(level < 0 || level > 3) return Hata(playerid, "Hata » {FFFFFF}Maximum level 3, minimum level 0 girebilirsiniz!");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[100];
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s sizi %i seviye dj yapti.",  PlayerInfo[playerid][Name], level);
	Bilgi(id, str);
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s isimli oyuncuyu %i seviye dj yaptiniz.",  PlayerInfo[id][Name], level);
	Bilgi(playerid, str);
	PlayerInfo[id][DJ] = level;
	PlayerInfo[id][Admin] = 0;
	PlayerInfo[id][Anim] = 0;
	PlayerInfo[id][VIP] = 0;
	return 1;
}

flags:makevip(CMD_ADMIN);
CMD:makevip(playerid,params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id,sure,level;
	if(sscanf(params,"uii", id, level, sure)) return Kullanim(playerid, "Kullanim » {FFFFFF}/makevip <Player/ID> <Level> <Gun>");
	if(!IsPlayerConnected(playerid)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(level < 0 || level > 3) return Hata(playerid, "Hata » {FFFFFF}Maximum level 3, minimum level 0 girebilirsiniz!");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[200];
	format(str,sizeof(str),"Bilgi » {FFFFFF}%s sizi %d günlük %s {FFFFFF}yaptı. Vip bitiş tarihi: %s", PlayerInfo[playerid][Name], sure, GetVipLevel(id), ReturnDate(gettime()+sure*86400));
	Bilgi(id, str);
	format(str,sizeof(str),"Bilgi » {FFFFFF}%s isimli oyuncuyu %d günlük %s {FFFFFF}yaptınız. Vip bitiş tarihi: %s", PlayerInfo[id][Name], sure, GetVipLevel(id), ReturnDate(gettime()+sure*86400));
	Bilgi(playerid, str);
	PlayerInfo[id][VIPSure] = gettime()+sure*86400;
	PlayerInfo[id][VIP] = level;
	PlayerInfo[id][DJ] = 0;
	PlayerInfo[id][Admin] = 0;
	PlayerInfo[id][Anim] = 0;
	mysql_format(Owsla, str, sizeof(str),"UPDATE `oyuncular` SET `VIP` = '%d', `VIPSure` = '%d' WHERE `UserID` = '%d'", PlayerInfo[id][VIP], gettime()+(sure*86400), PlayerInfo[id][UserID]);
	mysql_tquery(Owsla, str);
	return 1;
}

flags:createdm(CMD_ADMIN);
CMD:createdm(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id = Iter_Free(Dmler), isim[25], weap1, weap2, weap3, Float: can, Float: zirh, int, world;
	if(id == -1) return Hata(playerid, "Hata » {FFFFFF}Daha fazla dm oluşturamazsınız.");
    if(sscanf(params, "dddffdds[25]", weap1, weap2, weap3, can, zirh, int, world, isim))
	{
	    Kullanim(playerid, "Kullanim » {FFFFFF}/createdm <Silah 1> <Silah 2> <Silah 3> <Can> <Zirh> <Int> <World> <İsim>");
		return Bilgi(playerid, "Bilgi » {FFFFFF}Kullanmak istemediğiniz silahlar için 0 yazınız. /createdm 24 0 0 100 100 0 10 deagle gibi.");
    }
    if(!IsValidWeapon(weap1) || !IsValidWeapon(weap2) || !IsValidWeapon(weap3)) return Kullanim(playerid, "Kullanim » {FFFFFF}/createdm <Silah 1> <Silah 2> <Silah 3> <Can> <Zirh> <Int> <World> <İsim>");
	if(can <= 0 || can > 100) return Kullanim(playerid, "Kullanim » {FFFFFF}/createdm <Silah 1> <Silah 2> <Silah 3> <Can> <Zirh> <Int> <World> <İsim>");
	if(zirh < 0 || zirh > 100) return Kullanim(playerid, "Kullanim » {FFFFFF}/createdm <Silah 1> <Silah 2> <Silah 3> <Can> <Zirh> <Int> <World> <İsim>");
	Iter_Add(Dmler, id);
	format(DmInfo[id][dName], 25, "%s", isim);
	DmInfo[id][dWeap1] = weap1;
    DmInfo[id][dWeap2] = weap2;
    DmInfo[id][dWeap3] = weap3;
    DmInfo[id][dHP][0] = can;
    DmInfo[id][dHP][1] = zirh;
	DmInfo[id][dInt] = int;
	DmInfo[id][dWorld] = world;
	GetPlayerPos(playerid, DmInfo[id][dPos][0], DmInfo[id][dPos][1], DmInfo[id][dPos][2]);
	new query[512];
	mysql_format(Owsla, query, sizeof(query), "INSERT INTO `dmler` (`dID`, `dName`, `dWeap1`, `dWeap2`, `dWeap3`, `dPosX`, `dPosY`, `dPosZ`, `dInt`, `dWorld`, `dCan`, `dZirh`) VALUES ('%d', '%e', '%d', '%d', '%d', '%f', '%f', '%f', '%d', '%d', '%f', '%f')", id, DmInfo[id][dName], DmInfo[id][dWeap1], DmInfo[id][dWeap2], DmInfo[id][dWeap3], DmInfo[id][dPos][0], DmInfo[id][dPos][1], DmInfo[id][dPos][2], DmInfo[id][dInt], DmInfo[id][dWorld], DmInfo[id][dHP][0], DmInfo[id][dHP][1]);
    mysql_tquery(Owsla, query);
	format(query, sizeof(query), "Bilgi » {FFFFFF}%s isimli dmyi oluşturdunuz.", DmInfo[id][dName]);
	Bilgi(playerid, query);
	return 1;
}
flags:lsay(CMD_ADMIN);
CMD:lsay(playerid, params[])
{
	if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new yazi[128];
	if(sscanf(params, "s[128]", yazi)) return Kullanim(playerid, "Kullanim » {FFFFFF}/lsay <Yazi>");
	TextMesaji(TurkceKarakter(yazi));
	return 1;
}

flags:config(CMD_ADMIN);
CMD:config(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    ShowConfigDialog(playerid);
	return 1;
}

flags:spawnekle(CMD_ADMIN);
CMD:spawnekle(playerid)
{
	if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	SpawnEkle(playerid);
	return 1;
}

flags:spawnsil(CMD_ADMIN);
CMD:spawnsil(playerid, params[])
{
	if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id;
	if(sscanf(params, "i", id)) return  Kullanim(playerid, "Kullanim » {FFFFFF}/spawnsil <ID>");
    if(!Iter_Contains(Spawnlar, id)) return Hata(playerid, "Hata » {FFFFFF}Böyle bir spawn yok.");
	SpawnSil(id);
	Bilgi(playerid, "Bilgi » {FFFFFF}Spawni sildiniz.");
	return 1;
}
flags:alladmins(CMD_ADMIN);
CMD:alladmins(playerid)
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	foreach(new i: Player) SavePlayer(i);
	new query[75];
	mysql_format(Owsla, query, sizeof(query), "SELECT `Admin`, `Name` FROM `oyuncular` ORDER BY `Admin` DESC LIMIT 30");
	new Cache:VeriCek  = mysql_query(Owsla, query);
	new rows = cache_num_rows();
	if(rows)
	{
		new list[1024], IsimCek[MAX_PLAYER_NAME], count = 1, level;
		for(new i = 0; i < rows; ++i)
		{
			cache_get_value_name(i, "Name", IsimCek, 24);
			cache_get_value_int(i, "Admin", level);
			if(level > 0)
			{
				format(list,sizeof(list),"%s"ANA_RENK"%d:{FFFFFF}\t\t%d\t\t\t"ANA_RENK"%s\n", list, count, level, IsimCek);
				count++;
			}
		}
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}All Admins", list, "Kapat", "");
	}
	cache_delete(VeriCek);
	return 1;
}

flags:allanims(CMD_ADMIN);
CMD:allanims(playerid)
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	foreach(new i: Player) SavePlayer(i);
	new query[75];
	mysql_format(Owsla, query, sizeof(query), "SELECT `Anim`, `Name` FROM `oyuncular` ORDER BY `Anim` DESC LIMIT 30");
	new Cache:VeriCek = mysql_query(Owsla, query);
	new rows = cache_num_rows();
	if(rows)
	{
		new list[1024], IsimCek[MAX_PLAYER_NAME], count = 1, level;
		for(new i = 0; i < rows; ++i)
		{
			cache_get_value_name(i, "Name", IsimCek, 24);
			cache_get_value_int(i, "Anim", level);
			if(level > 0)
			{
				format(list,sizeof(list),"%s"ANA_RENK"%d:{FFFFFF}\t\t%d\t\t\t"ANA_RENK"%s\n", list, count, level, IsimCek);
				count++;
			}
		}
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}All Anims", list, "Kapat", "");
	}
	cache_delete(VeriCek);
	return 1;
}

flags:alldjs(CMD_ADMIN);
CMD:alldjs(playerid)
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	foreach(new i: Player) SavePlayer(i);
	new query[75];
	mysql_format(Owsla, query, sizeof(query), "SELECT `DJ`, `Name` FROM `oyuncular` ORDER BY `DJ` DESC LIMIT 30");
	new Cache:VeriCek = mysql_query(Owsla, query);
	new rows = cache_num_rows();
	if(rows)
	{
		new list[1024], IsimCek[MAX_PLAYER_NAME], count = 1, level;
		for(new i = 0; i < rows; ++i)
		{
			cache_get_value_name(i, "Name", IsimCek, 24);
			cache_get_value_int(i, "DJ", level);
			if(level > 0)
			{
				format(list,sizeof(list),"%s"ANA_RENK"%d:{FFFFFF}\t\t%d\t\t\t"ANA_RENK"%s\n", list, count, level, IsimCek);
				count++;
			}
		}
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}All DJs", list, "Kapat", "");
	}
	cache_delete(VeriCek);
	return 1;
}

flags:setcash(CMD_ADMIN);
CMD:setcash(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id, miktar;
	if(sscanf(params, "ud", id, miktar)) return Kullanim(playerid, "Kullanim » {FFFFFF}/setcash <Nick/ID> <Miktar>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[156];
  	format(str, sizeof str, "Bilgi » {FFFFFF}%s(%i) isimli oyuncunun parasini $%s olarak ayarladiniz.", PlayerInfo[id][Name], id, formatInt(miktar));
  	Bilgi(playerid, str);
  	format(str, sizeof str, "Bilgi » {FFFFFF}Admin %s(%i) sizin paranizi $%s olarak ayarladi.", PlayerInfo[playerid][Name], playerid, formatInt(miktar));
  	Bilgi(id, str);
  	ResetPlayerCash(id), GivePlayerCash(id, miktar);
	return 1;
}

flags:setscore(CMD_ADMIN);
CMD:setscore(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id, miktar;
	if(sscanf(params, "ud", id, miktar)) return Kullanim(playerid, "Kullanim » {FFFFFF}/setscore <Nick/ID> <Miktar>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[156];
  	format(str, sizeof(str), "Bilgi » {FFFFFF}%s(%i) isimli oyuncunun skorunu %d olarak ayarladiniz.", PlayerInfo[id][Name], id, miktar);
  	Bilgi(playerid, str);
  	format(str, sizeof(str), "Bilgi » {FFFFFF}Admin %s(%i) sizin skorunuzu %d olarak ayarladi.", PlayerInfo[playerid][Name], playerid, miktar);
  	Bilgi(id, str);
  	SetPlayerScore(id, miktar);
	return 1;
}
flags:kickall(CMD_ADMIN);
CMD:kickall(playerid, params[])
{
	if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new sbp[24];
	if(sscanf(params, "s[24]", sbp)) return Kullanim(playerid, "Kullanim » {FFFFFF}/kickall <Sebep>");
	new str[156];
	format(str, sizeof(str), "~r~~h~~h~[Kick] ~w~~h~~h~Admin ~r~~h~%s ~w~~h~~h~herkesi kickledi. (~r~~h~%s~w~~h~~h~)", PlayerInfo[playerid][Name], sbp);
	TextMesaji(TurkceKarakter(str));
	foreach(new i: Player)
	{
		if(playerid == i) continue;
		if(PlayerInfo[i][Admin] < 8)
		{
			KickReason(i, sbp, PlayerInfo[playerid][Name]);
		}
	}
	return 1;
}

flags:killall(CMD_ADMIN);
CMD:killall(playerid, params[])
{
	if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new sbp[24];
	if(sscanf(params, "s[24]", sbp)) return Kullanim(playerid, "Kullanim » {FFFFFF}/killall <Sebep>");
	new str[156];
	format(str, sizeof(str), "~r~~h~~h~[Kill] ~w~~h~~h~Admin ~r~~h~%s ~w~~h~~h~herkesi oldurdu. (~r~~h~%s~w~~h~~h~)", PlayerInfo[playerid][Name], sbp);
	TextMesaji(TurkceKarakter(str));
	foreach(new i: Player)
	{
		if(playerid == i) continue;
		if(PlayerInfo[playerid][SpawnBolgesinde] == true) continue;
		if(PlayerInfo[i][Admin] < 8)
		{
			SetPlayerHealth(i, 0.0);
		}
	}
	return 1;
}
flags:giveallmoney(CMD_ADMIN);
CMD:giveallmoney(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    new str[128], miktar;
   	if(sscanf(params,"i", miktar)) return Kullanim(playerid, "Kullanim » {FFFFFF}/giveallmoney <Miktar>");
    if((miktar < 5000) || (miktar > 100000)) return Hata(playerid, "Hata » {FFFFFF}En az $5000, en fazla $100000 girebilirsiniz.");
    format(str, sizeof(str), "~r~~h~~h~[Prize] ~w~~h~%s adli yonetici tum oyunculara ~r~~h~$%s ~w~~h~~h~verdi.", PlayerInfo[playerid][Name], formatInt(miktar));
    TextMesaji(TurkceKarakter(str));
	foreach(new i: Player) GivePlayerCash(i, miktar);
    return 1;
}

flags:giveallscore(CMD_ADMIN);
CMD:giveallscore(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    new str[128], miktar;
   	if(sscanf(params,"i", miktar)) return Kullanim(playerid, "Kullanim » {FFFFFF}/giveallscore <Miktar>");
    if(miktar > 100) return Hata(playerid, "Hata » {FFFFFF}En fazla 100 skor girebilirsiniz.");
    format(str, sizeof(str), "~r~~h~~h~[Prize] ~w~~h~%s adli yonetici tum oyunculara ~r~~h~%d ~w~~h~~h~skor verdi.", PlayerInfo[playerid][Name], miktar);
    TextMesaji(TurkceKarakter(str));
	foreach(new i: Player) GivePlayerScore(i, miktar);
    return 1;
}

flags:spawnlar(CMD_ADMIN);
CMD:spawnlar(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    if(Iter_Count(Spawnlar) == 0) return Hata(playerid, "Hata » {FFFFFF}Şuanda oluşturulmuş spawn bulunmamakta.");
    new str[1024];
	foreach(new i: Spawnlar)
	{
	    format(str, sizeof(str), "%s"ANA_RENK"%d {FFFFFF}%s\n", str, i, GetZoneName(SpawnInfo[i][spawnX], SpawnInfo[i][spawnY], SpawnInfo[i][spawnZ]));
	}
	ShowPlayerDialog(playerid, DIALOG_SPAWNS, DIALOG_STYLE_LIST, ""ANA_RENK"Owsla Gaming - {FFFFFF}Spawn Listesi", str, "Git", "Iptal");
	return 1;
}
flags:addupdate(CMD_ADMIN);
CMD:addupdate(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    new updt[125], query[628], it = Iter_Free(Updates);
    if(sscanf(params, "s[125]", updt)) return Kullanim(playerid, "Kullanim » {FFFFFF}/addupdate <Güncelleme>");
    if(it == -1) return Hata(playerid, "Hata » {FFFFFF}Güncelleme notu sınırı şuan dolu, başka bir zaman deneyin.");

    Iter_Add(Updates, it);
	mysql_format(Owsla, query, sizeof(query), "INSERT INTO `Updates` (`UpdateID`, `Admin`, `Update`) VALUES ('%d', '%e', '%e')", it, PlayerInfo[playerid][Name], updt);
    mysql_tquery(Owsla, query);
    return 1;
}
flags:updatedel(CMD_ADMIN);
CMD:updatedel(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 10 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    new str[128], updateid;
    if(sscanf(params, "i", updateid)) return Kullanim(playerid, "Kullanim » {FFFFFF}/updatedel <GüncellemeID>");
    if(!Iter_Contains(Updates, updateid)) return Hata(playerid, "Hata » {FFFFFF}Bu id ye ait bir rapor bulunmamakta.");

	Iter_Remove(Updates, updateid);
	mysql_format(Owsla, str, sizeof(str), "DELETE FROM `Updates` WHERE `UpdateID` = '%d'", updateid);
	mysql_tquery(Owsla, str);

	format(str, sizeof(str), "Bilgi » {FFFFFF}%d idli güncellemeyi sildiniz.", updateid);
	Bilgi(playerid, str);
    return 1;
}
// Level 9
flags:getip(CMD_ADMIN);
CMD:getip(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 9 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id;
	if(sscanf(params,"i",id)) return Kullanim(playerid, "Kullanim » {FFFFFF}/getip <Id>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
    new str[128];
    format(str, sizeof(str), "Bilgi » {FFFFFF}%s(%i) adlı oyuncunun IP adresi: %s", PlayerInfo[id][Name], id, PlayerInfo[id][IP]);
    Bilgi(playerid, str);
    return 1;
}

flags:bugraporlar(CMD_ADMIN);
CMD:bugraporlar(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 9 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    PlayerInfo[playerid][ListPage] = 0;

	new str[128];
    mysql_format(Owsla, str, sizeof(str), "SELECT `RaporID`, `Raporlayan`, `RaporTarih`, `Rapor` FROM `raporlar` ORDER BY RaporID ASC LIMIT 0, 10");
    new Cache:VeriCek = mysql_query(Owsla, str);
    new rows = cache_num_rows();
    if(rows)
    {
        new dialog[1024], reporter[25], reportid, reportedon, reportreason[125];
        format(dialog, sizeof(dialog),""ANA_RENK"#\t"ANA_RENK"Rapor Eden\t"ANA_RENK"Zaman\t"ANA_RENK"Rapor\n");
        for(new i = 0; i < rows; i++)
        {
            cache_get_value_name_int(i, "RaporID", reportid);
            cache_get_value_name(i, "Raporlayan", reporter);
            cache_get_value_name_int(i, "RaporTarih", reportedon);
            cache_get_value_name(i, "Rapor", reportreason);
            format(dialog, sizeof(dialog),"%s"ANA_RENK"%02d)\t{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\n", dialog, reportid, reporter, ReturnDate(reportedon), reportreason);
        }
        ShowPlayerDialog(playerid, DIALOG_BUGRAPORLAR, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}Bug Rapor", dialog, "Ileri", "Geri");
    }
    else Hata(playerid, "Hata » {FFFFFF}Şuanda bug rapor bulunmamakta.");
    cache_delete(VeriCek);
    return 1;
}

flags:bugraporsil(CMD_ADMIN);
CMD:bugraporsil(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 9 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    new str[128], repid;
    if(sscanf(params, "i", repid)) return Kullanim(playerid, "Kullanim » {FFFFFF}/bugraporsil <RaporID>");
    if(!Iter_Contains(Raporlar, repid)) return Hata(playerid, "Hata » {FFFFFF}Bu id ye ait bir rapor bulunmamakta.");

	Iter_Remove(Raporlar, repid);
	mysql_format(Owsla, str, sizeof(str), "DELETE FROM `raporlar` WHERE `RaporID` = '%d'", repid);
	mysql_tquery(Owsla, str);

	format(str, sizeof(str), "Bilgi » {FFFFFF}%d idli bug raporu sildiniz.", repid);
	Bilgi(playerid, str);
    return 1;
}
// Level 8
flags:setcolor(CMD_ADMIN);
CMD:setcolor(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 8 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id, hexx;
	if(sscanf(params, "ux", id, hexx)) return Kullanim(playerid, "Kullanim » {FFFFFF}/setcolor <Id> <Hex>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[156];
	SetPlayerColor(id, hexx);
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s(%d) adlı oyuncunun nick rengini değiştirdiniz.", PlayerInfo[id][Name], id);
  	Bilgi(playerid, str);
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s(%d) adlı yönetici nick renginizi değiştirdi.", PlayerInfo[playerid][Name], playerid);
  	Bilgi(id, str);
	return 1;
}

flags:unban(CMD_ADMIN);
CMD:unban(playerid)
{
    if(PlayerInfo[playerid][Admin] < 8 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
    ShowPlayerDialog(playerid, DIALOG_UNBAN, DIALOG_STYLE_LIST, ""ANA_RENK"Owsla Gaming - {FFFFFF}Unban", "{FFFFFF}SBan Açma\nNBan Açma\nIP Ban Açma", "Seç", "Kapat");
	return 1;
}
// Level 7
flags:rac(CMD_ADMIN);
CMD:rac(playerid)
{
    if(PlayerInfo[playerid][Admin] < 7 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	for(new i = 1; i <= MAX_VEHICLES; i++)
	{
		if(IsVehicleEmpty(i)) SetVehicleToRespawn(i);
	}
	new str[256];
    format(str, sizeof(str), "~g~~h~~h~[Respawn] ~r~~h~%s ~w~~h~~h~adli yonetici sunucudaki araclari yeniledi!", PlayerInfo[playerid][Name]);
    TextMesaji(TurkceKarakter(str));
	return 1;
}

flags:offban(CMD_ADMIN);
CMD:offban(playerid, params[])
{
	new isim[24], sebep[56], gun;
	if(PlayerInfo[playerid][Admin] < 7 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	if(sscanf(params, "s[24]is[56]", isim, gun, sebep)) return Kullanim(playerid, "Kullanim » {FFFFFF}/offban <Nick> <Gün> <Sebep>");
    if(CheckNick(isim) == 0) return Hata(playerid, "Hata » {FFFFFF}Böyle bir oyuncu yok.");
	if(gun < 1) return Hata(playerid, "Hata » {FFFFFF}En az 1 gün girebilirsiniz!");
	
	new str[256];
    mysql_format(Owsla, str, sizeof(str),"SELECT * FROM `bans` WHERE `kullanici` = '%e'", isim);
    new Cache:VeriCek = mysql_query(Owsla, str);
    if(cache_num_rows())
    {
        Hata(playerid, "Hata » {FFFFFF}Bu oyuncu zaten banlı!");
    }else
	{
		format(str, sizeof(str), "~r~~h~~h~[Off-Ban] ~w~~h~~h~%s >>> %s (~y~~h~%s~w~~h~~h~) (~p~~h~%d gun~w~~h~~h~)", PlayerInfo[playerid][Name], isim, sebep, gun);
		TextMesaji(TurkceKarakter(str));

		mysql_format(Owsla, str, sizeof(str), "INSERT INTO `bans` (kullanici, sebep, admin, bitis, ip, durum) VALUES ('%e', '%e', '%e', '%i', '%e', '0')", isim, sebep, PlayerInfo[playerid][Name], gettime()+(gun*86400), "Belirsiz");
		mysql_tquery(Owsla, str);
	}
	cache_delete(VeriCek);
	return 1;
}
flags:rban(CMD_ADMIN);
CMD:rban(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 7 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id, sebep[56];
	if(sscanf(params, "us[56]", id, sebep)) return Kullanim(playerid, "Kullanim » {FFFFFF}/rban <Nick/ID> <Sebep>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
    RBanReason(id, sebep, PlayerInfo[playerid][Name]);
	return 1;
}
// Level 6
flags:god(CMD_ADMIN);
CMD:god(playerid)
{
    if(PlayerInfo[playerid][Admin] < 6 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	switch(PlayerInfo[playerid][God])
	{
		case false:
		{
		    PlayerInfo[playerid][God] = true;
		    Bilgi(playerid, "Bilgi » {FFFFFF}GOD özelliğiniz devrede.");
		}
		case true:
		{
		    PlayerInfo[playerid][God] = false;
		    Bilgi(playerid, "Bilgi » {FFFFFF}GOD özelliğiniz devre dışı.");
		}
	}
	return 1;
}

flags:nban(CMD_ADMIN);
CMD:nban(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 6 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id, sebep[76];
	if(sscanf(params, "us[76]", id, sebep)) return Kullanim(playerid, "Kullanim » {FFFFFF}/nban <Nick/ID> <Sebep>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
  	NBanReason(id, sebep, PlayerInfo[playerid][Name]);
	return 1;
}
// Level 5
flags:ban(CMD_ADMIN);
CMD:ban(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 5 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id, sebep[56], gun;
	if(sscanf(params, "uis[56]", id, gun, sebep)) return Kullanim(playerid, "Kullanim » {FFFFFF}/ban <Nick/ID> <Gün> <Sebep>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(gun < 1) return Hata(playerid, "Hata » {FFFFFF}En az 1 gün girebilirsiniz!");
    SBanReason(id, sebep, PlayerInfo[playerid][Name], gun);
	return 1;
}

flags:akill(CMD_ADMIN);
CMD:akill(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 5 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id, reason[56];
    if(sscanf(params, "ds[56]", id, reason)) return Kullanim(playerid, "Kullanim » {FFFFFF}/akill <Nick/ID> <Sebep>");
    if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
    if(playerid == id) return Hata(playerid, "Hata » {FFFFFF}Kendinizi öldüremezsiniz!");
    if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[256];
	format(str, sizeof(str), "~w~~h~~h~[Akill] ~r~~h~%s ~w~~h~~h~>> ~r~~h~%s ~w~~h~~h~(~r~~h~%s~w~~h~~h~)", PlayerInfo[playerid][Name], PlayerInfo[id][Name], reason);
    TextMesaji(TurkceKarakter(str));
    SetPlayerHealth(id, 0.0);
	return 1;
}
// Level 2
flags:kick(CMD_ADMIN);
CMD:kick(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 6 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id, sebep[76];
	if(sscanf(params, "us[76]", id, sebep)) return Kullanim(playerid, "Kullanim » {FFFFFF}/kick <Nick/ID> <Sebep>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
  	KickReason(id, sebep, PlayerInfo[playerid][Name]);
	return 1;
}
// Level 1
flags:aka(CMD_ADMIN);
CMD:aka(playerid, params[])
{
	if(PlayerInfo[playerid][Admin] < 1 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new id;
	if(sscanf(params, "u", id)) return Kullanim(playerid, "Kullanim » {FFFFFF}/aka <Nick/ID>");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][Admin] < PlayerInfo[id][Admin]) return Hata(playerid, "Hata » {FFFFFF}Bu yöneticiye bu komutu kullanamazsınız.");
	new str[1024], baslik[56];
	format(baslik, sizeof(baslik), ""ANA_RENK"Owsla Gaming - {FFFFFF}Aka %s", PlayerInfo[id][Name]);
	format(str, sizeof(str), "%s", GetAka(id));
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_TABLIST_HEADERS, baslik, str, "Tamam", "");
	return 1;
}
flags:acmds(CMD_ADMIN);
CMD:acmds(playerid, params[])
{
    if(PlayerInfo[playerid][Admin] < 1 && !IsPlayerAdmin(playerid)) return Hata(playerid, "Hata » {FFFFFF}Bu komutu kullanmak için yetkiniz yeterli değil.");
	new str[3500];
	format(str, sizeof(str), ""ANA_RENK"Level\t"ANA_RENK"Komut\t"ANA_RENK"Açıklama\n");
	for(new i; i < sizeof(AdminKomutlari); i++)
	{
		if(PlayerInfo[playerid][Admin] >= AdminKomutlari[i][cLevel])
		{
			format(str, sizeof(str), "%s"ANA_RENK"%i\t{FFFFFF}%s\t{FFFFFF}%s\n", str, AdminKomutlari[i][cLevel], AdminKomutlari[i][cIsim], AdminKomutlari[i][cAciklama]);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}Admin Komutları", str, "Tamam", "");
	return 1;
}
// Oyuncu komutları
flags:pm(CMD_ADMIN);
CMD:pm(playerid, params[])
{
	new id, pm[128];
	if(sscanf(params, "us[128]", id, pm)) return Kullanim(playerid, "Kullanim » {FFFFFF}/pm <Player/ID> <Mesaj>");
	if(id == INVALID_PLAYER_ID) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(PlayerInfo[playerid][PMengel] == false) return Hata(playerid, "Hata » {FFFFFF}Özel mesaj alımınız kapalı, /Ayarlar komutunu kullanarak açabilirsiniz.");
	if(PlayerInfo[id][PMengel] == false) return Hata(playerid, "Hata » {FFFFFF}Özel mesaj alımı kapalı.");
	if(id == playerid) return Hata(playerid, "Hata » {FFFFFF}Kendinize mesaj atamazsınız.");
    new str[256];
	format(str, sizeof(str), "» PM Gönderildi %s(%d) : {FFFFFF}%s", PlayerInfo[id][Name], id, pm);
	SendClientMessage(playerid, GetPlayerColor(playerid), str);
	format(str, sizeof(str), "» PM Geldi %s(%d) : {FFFFFF}%s", PlayerInfo[playerid][Name], playerid, pm);
	SendClientMessage(id, GetPlayerColor(id), str);
	PlayerPlaySound(id, 1085, 0.0, 0.0, 10.0);
    PlayerInfo[playerid][LastPM] = id;
    PlayerInfo[id][LastPM] = playerid;
 	return 1;
}
flags:re(CMD_ADMIN);
CMD:re(playerid, params[])
{
	new id = PlayerInfo[playerid][LastPM];
	if(id == INVALID_PLAYER_ID) return Hata(playerid, "Hata » {FFFFFF}Daha önce özel mesaj almamışsınız.");
	if(PlayerInfo[playerid][PMengel] == false) return Hata(playerid, "Hata » {FFFFFF}Özel mesaj alımınız kapalı, /Ayarlar komutunu kullanarak açabilirsiniz.");
	if(PlayerInfo[id][PMengel] == false) return Hata(playerid, "Hata » {FFFFFF}Özel mesaj alımı kapalı.");
	if(!IsPlayerConnected(id)) return Hata(playerid, "Hata » {FFFFFF}Oyuncu oyunda değil.");
	if(isnull(params)) return Kullanim(playerid, "Kullanim » {FFFFFF}/re <Mesaj>");
    new str[40+128];
	format(str, sizeof(str), "» PM Gönderildi %s(%d) : {FFFFFF}%s", PlayerInfo[id][Name], id, params);
	SendClientMessage(playerid, GetPlayerColor(playerid), str);
	format(str, sizeof(str), "» PM Geldi %s(%d) : {FFFFFF}%s", PlayerInfo[playerid][Name], playerid, params);
	SendClientMessage(id, GetPlayerColor(id), str);
	PlayerPlaySound(id, 1085, 0.0, 0.0, 10.0);
	PlayerInfo[playerid][LastPM] = id;
 	PlayerInfo[id][LastPM] = playerid;
	return 1;
}
CMD:ayarlar(playerid)
{
    ShowSettingsDialog(playerid);
	return 1;
}
CMD:cezalarim(playerid)
{
	new str[512];
	format(str, sizeof(str), "{FFFFFF}Bu hesapta almış olduğunuz cezalarin sayısı aşağıda yazmaktadır.\n\n\
							  \t{FFFFFF}Uyarı sayısı: "ANA_RENK"%d\n\
							  \t{FFFFFF}Kick sayısı: "ANA_RENK"%d\n\
							  \t{FFFFFF}Ban sayısı: "ANA_RENK"%d", PlayerInfo[playerid][WarnCount], PlayerInfo[playerid][KickCount], PlayerInfo[playerid][BanCount]);
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Cezalarim", str, "Tamam", "");
	return 1;
}
CMD:basarimlar(playerid)
{
	new str[1024], str2[128];
	format(str, sizeof(str), ""ANA_RENK"#\t"ANA_RENK"Basari\t"ANA_RENK"Kosul\t"ANA_RENK"Durum\n");
	for(new m; m < sizeof(MedalInfo); m++)
	{
		format(str, sizeof(str), "%s"ANA_RENK"%d\t{FFFFFF}%s\t%s\t%s\n", str, m+1, MedalInfo[m][mIsim], MedalInfo[m][mAciklama], (MyMedals[playerid][m] == 1) ? ("{66FF66}") : ("{FF6666}"));
	}
	format(str2, sizeof(str2), ""ANA_RENK"Owsla Gaming - {FFFFFF}Başarımlar (%d/%d)", GetPlayerMedalsCount(playerid), sizeof(MedalInfo));
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_TABLIST_HEADERS, str2, str, "Tamam", "");
	return 1;
}
alias:veh("v", "car");
CMD:veh(playerid, params[])
{
	if(PlayerInfo[playerid][SpawnBolgesinde] == true) return Hata(playerid, "Hata » {FFFFFF}Spawn bolgesinde arac indiremezsin.");
	new vehicle[32], aracid, Float:X, Float:Y, Float:Z, Float:Angle;
	if(sscanf(params, "s[32]", vehicle)) return Kullanim(playerid, "Kullanim » {FFFFFF}/veh <Arac ID/Isim>");
	if(!IsNumeric(vehicle))
	{
 		aracid = AracIsimiGiris(vehicle);
	}else
	{
		aracid = strval(vehicle);
	}
	if(aracid < 400 || aracid > 611) return Hata(playerid, "Hata » {FFFFFF}Böyle bir araç yok.");
	if((aracid == 520 || aracid == 432 || aracid == 425 || aracid == 447 || aracid == 464 || aracid == 465) && PlayerInfo[playerid][Admin] < 9) return Hata(playerid, "Hata » {FFFFFF}Bu aracı alamazsınız.");
    if(PlayerInfo[playerid][Araba] == true)
	{
		DestroyVehicle(PlayerInfo[playerid][Arabam]);
		PlayerInfo[playerid][Araba] = false;
	}
    GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	PlayerInfo[playerid][Arabam] = CreateVehicle(aracid, X, Y, Z, Angle, -1, -1, -1);
	SetVehicleNumberPlate(PlayerInfo[playerid][Arabam], "{FF0000}OWSLA");
	SetVehicleVirtualWorld(PlayerInfo[playerid][Arabam], GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(PlayerInfo[playerid][Arabam], GetPlayerInterior(playerid));
	PutPlayerInVehicle(playerid, PlayerInfo[playerid][Arabam], 0);
	PlayerInfo[playerid][Araba] = true;
	return 1;
}

alias:admins("djs", "anims");
CMD:admins(playerid)
{
	new adminler = 0, djler = 0, animler = 0, str[128], str2[1000];
	strcat(str2, ""ANA_RENK"Admin Listesi\n");
    foreach(new i: Player)
    {
	    if(PlayerInfo[i][Admin] >= 1)
	    {
            format(str, sizeof(str), "{FF9933}%s (Level %d)\n", PlayerInfo[i][Name], PlayerInfo[i][Admin]);
            strcat(str2, str);
	        adminler++;
        }
    }
    if(adminler == 0) strcat(str2, "{FF9933}Online Admin Yok.\n");

	strcat(str2, "\n"ANA_RENK"Animator Listesi\n");
    foreach(new a: Player)
    {
	    if(PlayerInfo[a][Anim] >= 1)
	    {
            format(str, sizeof(str), "{99CC33}%s (Level %d)\n", PlayerInfo[a][Name], PlayerInfo[a][Anim]);
            strcat(str2, str);
	        animler++;
        }
    }
    if(animler == 0) strcat(str2, "{99CC33}Online Animator Yok.\n");

	strcat(str2, "\n"ANA_RENK"DJ Listesi\n");
	foreach(new x: Player)
    {
	    if(PlayerInfo[x][DJ] >= 1)
	    {
     		format(str, sizeof(str), "{FF66FF}%s (Level %d)\n\n", PlayerInfo[x][Name], PlayerInfo[x][DJ]);
	        strcat(str2, str);
			djler++;
        }
    }
    if(djler == 0) strcat(str2, "{FF66FF}Online DJ Yok.\n\n");

    format(str, sizeof(str), "\t\t\t\t"ANA_RENK"Admin: {FFFFFF}%d\n", adminler);
    strcat(str2, str);
    format(str, sizeof(str), "\t\t\t\t"ANA_RENK"Animator: {FFFFFF}%d\n", animler);
    strcat(str2, str);
    format(str, sizeof(str), "\t\t\t\t"ANA_RENK"DJ: {FFFFFF}%d\n", djler);
    strcat(str2, str);
    format(str, sizeof(str), "\t\t\t\t"ANA_RENK"Bütün yetkililer: {FFFFFF}%d\n", adminler+animler+djler);
    strcat(str2, str);
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Online Yöneticiler", str2, "Tamam", "");
	return 1;
}

CMD:vips(playerid)
{
    new str[1024], count = 0;
    format(str, sizeof(str),""ANA_RENK"ID\t"ANA_RENK"Level\t"ANA_RENK"Nick\n");
	foreach(new i: Player)
	{
    	if(PlayerInfo[i][VIP] >= 1)
		{
			count++;
        	format(str, sizeof(str),"%s{FFFFFF}%02d\t{FFFFFF}%s\t"ANA_RENK"%s\n", str, i, GetVipLevel(i), PlayerInfo[i][Name]);
        }
    }
    if(count == 0) return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Online Vipler", "{FFFFFF}Serverde Online vip Yok", "Tamam", "");
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}Online Vipler", str, "Tamam", "");
    return 1;
}

CMD:bugrapor(playerid, params[])
{
    new raporr[125], query[628], it = Iter_Free(Raporlar);
    if(sscanf(params, "s[125]", raporr)) return Kullanim(playerid, "Kullanim » {FFFFFF}/bugrapor <Rapor>");
    if(it == -1) return Hata(playerid, "Hata » {FFFFFF}Bug rapor sınırı şuan dolu, başka bir zaman deneyin.");

    foreach(new i: Player) if(PlayerInfo[i][Admin] >= 9 || IsPlayerAdmin(i)) SendClientMessage(i, 0xAFAFAFFF, "Bug Rapor » {FFFFFF}Yeni bir bug rapor var! /Bugraporlar");
    Bilgi(playerid, "Bilgi » {FFFFFF}Bug raporunuz online adminlere iletildi.");
    Iter_Add(Raporlar, it);
	mysql_format(Owsla, query, sizeof(query), "INSERT INTO `raporlar` (`RaporID`, `Raporlayan`, `RaporTarih`, `Rapor`) VALUES ('%d', '%e', '%d', '%e')", it, PlayerInfo[playerid][Name], gettime(), raporr);
    mysql_tquery(Owsla, query);
    return 1;
}
CMD:objects(playerid)
{
    new str[64*MAX_ATTACHMENTS_PER_PLAYER], s[40];
	format(str, sizeof(str), ""ANA_RENK"Slot 1\t%s\n", AttachInfo[playerid][0][used1] == true ? ("{FF6666}Dolu") : ("{66FF66}Bos"));
	for(new i = 1; i < MAX_ATTACHMENTS_PER_PLAYER; i++)
	{
		format(s, sizeof(s), ""ANA_RENK"Slot %d\t%s\n", i+1, AttachInfo[playerid][i][used1] == true ? ("{FF6666}Dolu") : ("{66FF66}Bos"));
		strcat(str, s);
	}
	ShowPlayerDialog(playerid, DIALOG_OBJECTS, DIALOG_STYLE_TABLIST, ""ANA_RENK"Owsla Gaming - {FFFFFF}Attachments", str, "Sec", "Iptal");
	return 1;
}
CMD:dmler(playerid)
{
	if(Iter_Count(Dmler) == 0) return Hata(playerid, "Hata » {FFFFFF}Şuanda oluşturulmuş dm bulunmamakta. Yöneticiler ile irtibata geçiniz.");
	new str[1024];
	str = ""ANA_RENK"Dm Ismi\t"ANA_RENK"Silahlar\n";
	foreach(new i: Dmler)
	{
		format(str, sizeof(str), "%s{FFFFFF}%s\t"ANA_RENK"%s {FFFFFF}| "ANA_RENK"%s {FFFFFF}| "ANA_RENK"%s\n", str, DmInfo[i][dName], GetWeaponNameEx(DmInfo[i][dWeap1]), GetWeaponNameEx(DmInfo[i][dWeap2]), GetWeaponNameEx(DmInfo[i][dWeap3]));
	}
	ShowPlayerDialog(playerid, DIALOG_DMS, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}Deathmatch Listesi", str, "Katıl", "Iptal");
	return 1;
}
CMD:dm(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) return Kullanim(playerid, "Kullanim » {FFFFFF}/dm <ID>");
    if(!Iter_Contains(Dmler, id)) return Hata(playerid, "Hata » {FFFFFF}Geçersiz dm idsi. /Dmler");
	ResetPlayerWeapons(playerid);
	SetPlayerPos(playerid, DmInfo[id][dPos][0], DmInfo[id][dPos][1], DmInfo[id][dPos][2]);
	SetPlayerInterior(playerid, DmInfo[id][dInt]);
	SetPlayerVirtualWorld(playerid, DmInfo[id][dWorld]);
	GivePlayerWeapon(playerid, DmInfo[id][dWeap1], 9999);
	GivePlayerWeapon(playerid, DmInfo[id][dWeap2], 9999);
	GivePlayerWeapon(playerid, DmInfo[id][dWeap3], 9999);
	SetPlayerHealth(playerid, DmInfo[id][dHP][0]);
	SetPlayerArmour(playerid, DmInfo[id][dHP][1]);
    PlayerInfo[playerid][Dmde] = true;
    PlayerInfo[playerid][DmID] = id;
	new str[128];
	format(str, sizeof(str), "Bilgi » {FFFFFF}%s isimli dmye katıldınız!", DmInfo[id][dName]);
	Bilgi(playerid, str);
	return 1;
}
flags:dmcik(CMD_ADMIN);
CMD:dmcik(playerid)
{
	if(PlayerInfo[playerid][Dmde] == false) return Hata(playerid, "Hata » {FFFFFF}Zaten herhangi dm de değilsiniz.");
    PlayerInfo[playerid][Dmde] = false;
    PlayerInfo[playerid][DmID] = -1;
    SpawnPlayer(playerid);
	return 1;
}
CMD:updates(playerid, params[])
{
    PlayerInfo[playerid][ListPage] = 0;

	new str[128];
    mysql_format(Owsla, str, sizeof(str), "SELECT `UpdateID`, `Update` FROM `Updates` ORDER BY UpdateID ASC LIMIT 0, 15");
    new Cache:VeriCek = mysql_query(Owsla, str);
    new rows = cache_num_rows();
    if(rows)
    {
        new dialog[1024], upID, updatee[125];
        for(new i = 0; i < rows; i++)
        {
            cache_get_value_name_int(i, "UpdateID", upID);
            cache_get_value_name(i, "Update", updatee);
            format(dialog, sizeof(dialog),"%s"ANA_RENK"%d) {FFFFFF}%s\n", dialog, upID, updatee);
        }
        ShowPlayerDialog(playerid, DIALOG_UPDATES, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Updates", dialog, "Ileri", "Geri");
    }
    else Hata(playerid, "Hata » {FFFFFF}Şuanda güncelleme bulunmamakta.");
    cache_delete(VeriCek);
    return 1;
}
function OnPlayerDataLoaded(playerid, race_check)
{
	if(race_check != g_MysqlRaceCheck[playerid]) return Kick(playerid);
	new str[256];
	if(cache_num_rows() > 0)
	{
		cache_get_value(0, "Password", PlayerInfo[playerid][Password], 65);
		cache_get_value(0, "Salt", PlayerInfo[playerid][Salt], 17);
		PlayerInfo[playerid][Cache_ID] = cache_save();
		
   		format(str, sizeof(str), ""ANA_RENK"Owsla Gaming'e {FFFFFF}Hoşgeldiniz!\n\
									    {FFFFFF}Sunucu veritabanında "ANA_RENK"%s {FFFFFF}adında bir kullanıcı bulunuyor.\n\
									    {FFFFFF}Giriş yapmak için "ANA_RENK"45 saniye {FFFFFF}içinde aşağıdaki kutucuğa şifrenizi giriniz.", PlayerInfo[playerid][Name]);
		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""ANA_RENK"Owsla Gaming - {FFFFFF}Giris", str, "Giris", "Cikis");
		PlayerInfo[playerid][LoginTimer] = SetTimerEx("OnLoginTimeout", 45*1000, false, "d", playerid);
	}else
	{
		format(str, sizeof(str), ""ANA_RENK"Owsla Gaming'e {FFFFFF}Hoşgeldiniz!\n\
			                   			{FFFFFF}Sunucu veritabanında "ANA_RENK"%s {FFFFFF}adında bir kullanıcı bulunmuyor.\n\
							   			{FFFFFF}Kayıt olmak için aşağıdaki kutucuğa şifrenizi giriniz.", PlayerInfo[playerid][Name]);
		ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""ANA_RENK"Owsla Gaming - {FFFFFF}Kayıt Ol", str, "Kayit", "Cikis");
	}
	return 1;
}
function OnLoginTimeout(playerid)
{
	PlayerInfo[playerid][LoginTimer] = 0;
    KickReason(playerid, "Zaman Aşımı", "Sistem");
	return 1;
}
function OnPlayerRegister(playerid)
{
	PlayerInfo[playerid][UserID] = cache_insert_id();
	Bilgi(playerid, "Bilgi » {FFFFFF}Yeni bir hesap olusturdunuz. Iyi eglenceler!");
	PlayerInfo[playerid][IsLoggedIn] = true;
	GivePlayerCash(playerid, 5000), GivePlayerExp(playerid, 5);
	new str[128];
	format(str, sizeof(str), "Owsla Gaming » {FFFFFF}%s servera kayıt olarak aramıza katıldı. Kayıtlı kullanıcı sayısı %d", PlayerInfo[playerid][Name], PlayerInfo[playerid][UserID]);
	SendClientMessageToAll(0xFF6600FF, str);
	return 1;
}
AssignPlayerData(playerid)
{
	cache_get_value_int(0, "UserID", PlayerInfo[playerid][UserID]);
	cache_get_value_int(0, "Admin", PlayerInfo[playerid][Admin]);
	cache_get_value_int(0, "Anim", PlayerInfo[playerid][Anim]);
	cache_get_value_int(0, "DJ", PlayerInfo[playerid][DJ]);
	cache_get_value_int(0, "VIP", PlayerInfo[playerid][VIP]);
	cache_get_value_int(0, "VIPSure", PlayerInfo[playerid][VIPSure]);
	cache_get_value_int(0, "Money", PlayerInfo[playerid][Money]);
	cache_get_value_int(0, "Score", PlayerInfo[playerid][Score]);
	cache_get_value_int(0, "Exp", PlayerInfo[playerid][Exp]);
	cache_get_value_int(0, "ExpLevel", PlayerInfo[playerid][ExpLevel]);
	cache_get_value_int(0, "Kills", PlayerInfo[playerid][Kills]);
	cache_get_value_int(0, "Deaths", PlayerInfo[playerid][Deaths]);
	cache_get_value_int(0, "Banned", PlayerInfo[playerid][Banned]);
	cache_get_value_int(0, "KickCount", PlayerInfo[playerid][KickCount]);
	cache_get_value_int(0, "BanCount", PlayerInfo[playerid][BanCount]);
	cache_get_value_int(0, "WarnCount", PlayerInfo[playerid][WarnCount]);

    GivePlayerCash(playerid, PlayerInfo[playerid][Money]);
	SetPlayerScore(playerid, PlayerInfo[playerid][Score]);
	ExpGuncelle(playerid);
	return 1;
}
CreateMysqlTables()
{
	new table[1024];
	strcat(table,	"CREATE TABLE IF NOT EXISTS `oyuncular` (\
												`UserID` INT(11) NOT NULL AUTO_INCREMENT,\
												`Name` VARCHAR(24) NOT NULL,\
												`Password` char(64) NOT NULL,\
												`Salt` char(16) NOT NULL,\
												`Admin` INT(11) NOT NULL DEFAULT '0',\
												`Anim` INT(11) NOT NULL DEFAULT '0',\
												`DJ` INT(11) NOT NULL DEFAULT '0',\
												`VIP` INT(11) NOT NULL DEFAULT '0',\
												`VIPSure` INT(11) NOT NULL DEFAULT '0',");

	strcat(table, "								`Money` INT(11) NOT NULL DEFAULT '0',\
												`Score` INT(11) NOT NULL DEFAULT '0',\
												`Exp` INT(11) NOT NULL DEFAULT '0',\
												`ExpLevel` INT(11) NOT NULL DEFAULT '1',\
												`Kills` INT(11) NOT NULL DEFAULT '0',\
												`Deaths` INT(11) NOT NULL DEFAULT '0',\
												`Banned` INT(11) NOT NULL DEFAULT '0',\
												`KickCount` INT(11) NOT NULL DEFAULT '0',\
												`BanCount` INT(11) NOT NULL DEFAULT '0',\
												`WarnCount` INT(11) NOT NULL DEFAULT '0',\
												 PRIMARY KEY (`UserID`), UNIQUE KEY `Name` (`Name`))");
    mysql_tquery(Owsla, table);
	mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `spawnlar` (`id` INT(11) NOT NULL, `spawnx` VARCHAR(16) NOT NULL, `spawny` VARCHAR(16) NOT NULL, `spawnz` VARCHAR(16) NOT NULL, `spawna` VARCHAR(16) NOT NULL, PRIMARY KEY (`id`) )");
	mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `server` (`MaxPing` INT(11) NOT NULL DEFAULT '300', `Time` INT(11) NOT NULL DEFAULT '12', `Weather` INT(11) NOT NULL DEFAULT '0', `Headshot` INT(11) NOT NULL DEFAULT '1', `Rekor` INT(11) NOT NULL DEFAULT '0', `AntiProxy` INT(11) NOT NULL DEFAULT '1')");
    mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `bans` (`banid` INT(11) NOT NULL AUTO_INCREMENT, `kullanici` VARCHAR(24) NOT NULL, `sebep` VARCHAR(56) NOT NULL, `admin` VARCHAR(24) NOT NULL, `bitis` INT(11) NOT NULL, `ip` VARCHAR(56) NOT NULL, `durum` INT(11) NOT NULL, PRIMARY KEY (`banid`) )");
    mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `akas` (`Username` VARCHAR(24) NOT NULL, `Ip` VARCHAR(16) NOT NULL)");
    mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `raporlar` (`RaporID` INT(11) NOT NULL, `Raporlayan` VARCHAR(25) NOT NULL, `RaporTarih` INT(11) NOT NULL, `Rapor` VARCHAR(125) NOT NULL, PRIMARY KEY (`RaporID`))");
    mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `Updates` (`UpdateID` INT(11) NOT NULL, `Admin` VARCHAR(25) NOT NULL, `Update` VARCHAR(125) NOT NULL, PRIMARY KEY (`UpdateID`))");
	mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `objects` (`UserID` INT(11) NOT NULL, `Index` INT(2) NOT NULL, `Model` INT(7) NOT NULL, `Bone` INT(2) NOT NULL, `OffsetX` FLOAT NOT NULL, `OffsetY` FLOAT NOT NULL, `OffsetZ` FLOAT NOT NULL, `RotX` FLOAT NOT NULL, `RotY` FLOAT NOT NULL, `RotZ` FLOAT NOT NULL, `ScaleX` FLOAT NOT NULL, `ScaleY` FLOAT NOT NULL, `ScaleZ` FLOAT NOT NULL)");
    mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `dmler` (`dID` INT(11) NOT NULL, `dName` VARCHAR(25) NOT NULL, `dWeap1` INT(11) NOT NULL, `dWeap2` INT(11) NOT NULL, `dWeap3` INT(11) NOT NULL, `dPosX` FLOAT NOT NULL, `dPosY` FLOAT NOT NULL, `dPosZ` FLOAT NOT NULL, `dInt` INT(11) NOT NULL, `dWorld` INT(11) NOT NULL, `dCan` FLOAT NOT NULL, `dZirh` FLOAT NOT NULL, PRIMARY KEY (`dID`))");
    mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `blockip` (`ip` VARCHAR(16) NOT NULL, `player` VARCHAR(25) NOT NULL, `times` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP)");
    mysql_tquery(Owsla, "CREATE TABLE IF NOT EXISTS `medals` (`UserID` INT(11) NOT NULL DEFAULT '0', `Medal1` int(1) NOT NULL DEFAULT '0', `Medal2` int(1) NOT NULL DEFAULT '0', `Medal3` int(1) NOT NULL DEFAULT '0', `Medal4` int(1) NOT NULL DEFAULT '0', `Medal5` int(1) NOT NULL DEFAULT '0', `Medal6` int(1) NOT NULL DEFAULT '0')");
	return 1;
}
SavePlayer(playerid)
{
	if(PlayerInfo[playerid][IsLoggedIn] == false) return 0;
	new query[256];
	mysql_format(Owsla, query, sizeof(query), "UPDATE `oyuncular` SET `Admin` = '%d', `Anim` = '%d' WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][Admin], PlayerInfo[playerid][Anim], PlayerInfo[playerid][UserID]);
	mysql_tquery(Owsla, query);
	mysql_format(Owsla, query, sizeof(query), "UPDATE `oyuncular` SET `DJ` = '%d', `Banned` = '%d' WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][DJ], PlayerInfo[playerid][Banned], PlayerInfo[playerid][UserID]);
	mysql_tquery(Owsla, query);
	mysql_format(Owsla, query, sizeof(query), "UPDATE `oyuncular` SET `Money` = '%d', `Score` = '%d' WHERE `UserID` = '%d' LIMIT 1", GetPlayerCash(playerid), GetPlayerScore(playerid), PlayerInfo[playerid][UserID]);
	mysql_tquery(Owsla, query);
	mysql_format(Owsla, query, sizeof(query), "UPDATE `oyuncular` SET `Exp` = '%d', `ExpLevel` = '%d' WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][Exp], PlayerInfo[playerid][ExpLevel], PlayerInfo[playerid][UserID]);
	mysql_tquery(Owsla, query);
	mysql_format(Owsla, query, sizeof(query), "UPDATE `oyuncular` SET `Kills` = '%d', `Deaths` = '%d' WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][Kills], PlayerInfo[playerid][Deaths], PlayerInfo[playerid][UserID]);
	mysql_tquery(Owsla, query);
	mysql_format(Owsla, query, sizeof(query), "UPDATE `oyuncular` SET `KickCount` = '%d', `BanCount` = '%d' WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][KickCount], PlayerInfo[playerid][BanCount], PlayerInfo[playerid][UserID]);
	mysql_tquery(Owsla, query);
	mysql_format(Owsla, query, sizeof(query), "UPDATE `oyuncular` SET `WarnCount` = '%d' WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][WarnCount], PlayerInfo[playerid][UserID]);
	mysql_tquery(Owsla, query);
	return 1;
}
stock KickReason(playerid, reason[], admin[])
{
	new str[256], h, m, s, g, a, y;
	gettime(h, m, s),getdate(g, a, y);
	format(str, sizeof(str), "~r~~h~~h~[Kick] ~w~~h~~h~%s >>> %s (~y~~h~%s~w~~h~~h~)", admin, PlayerInfo[playerid][Name], reason);
	TextMesaji(TurkceKarakter(str));
	for(new i = 0; i < 20; i++) SendClientMessage(playerid, 0xFFFFFFFF, "");
    format(str, sizeof(str), "{FFFFFF}» Kickleyen: "ANA_RENK"%s\n\
							    {FFFFFF}» Sebep: "ANA_RENK"%s\n\
							    {FFFFFF}» Saat: "ANA_RENK"%02d:%02d:%02d\n\
							    {FFFFFF}» Tarih: "ANA_RENK"%d/%d/%d", admin, reason, h, m, s, g, a, y);
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Kick", str, "Tamam", "");
    PlayerInfo[playerid][KickCount]++;
	KickPlayer(playerid);
	return 1;
}
stock BanReason(playerid, reason[], admin[])
{
	new	str[256], h, m, s, g, a, y;
	gettime(h, m, s), getdate(g, a, y);
	format(str, sizeof(str), "~r~~h~~h~[Ban] ~w~~h~~h~%s >>> %s (~y~~h~%s~w~~h~~h~)", admin, PlayerInfo[playerid][Name], reason);
	TextMesaji(TurkceKarakter(str));
	for(new i = 0; i < 20; i++) SendClientMessage(playerid, 0xFFFFFFFF, "");
    format(str, sizeof(str),   "{FFFFFF}» Banlayan: "ANA_RENK"%s\n\
							    {FFFFFF}» Sebep: "ANA_RENK"%s\n\
							    {FFFFFF}» Saat: "ANA_RENK"%02d:%02d:%02d\n\
							    {FFFFFF}» Tarih: "ANA_RENK"%d/%d/%d", admin, reason, h, m, s, g, a, y);
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Ban", str, "Tamam", "");
    PlayerInfo[playerid][BanCount]++;
	BanPlayer(playerid);
	return 1;
}
stock SBanReason(playerid, reason[], admin[], gun)
{
	new str[256];
	format(str, sizeof(str), "~r~~h~~h~[BAN] ~w~~h~~h~%s >>> %s (~y~~h~%s~w~~h~~h~) (~p~~h~%d gun~w~~h~~h~)", admin, PlayerInfo[playerid][Name], reason, gun);
	TextMesaji(TurkceKarakter(str));
    for(new i = 0; i < 20; i++) SendClientMessage(playerid, 0xFFFFFFFF, "");
    
	mysql_format(Owsla, str, sizeof(str),"INSERT INTO `bans` (kullanici, sebep, admin, bitis, ip, durum) VALUES ('%e', '%e', '%e', '%i', '%s', '1')", PlayerInfo[playerid][Name], reason, admin, gettime()+(gun*86400), PlayerInfo[playerid][IP]);
	mysql_tquery(Owsla, str);

	format(str, sizeof(str), "{FFFFFF}Hesabınız yasaklandı "ANA_RENK"%s\n\n\
							  		\t{FFFFFF}» Banlayan: "ANA_RENK"%s\n\
						      		\t{FFFFFF}» Sebep: "ANA_RENK"%s\n\
	                          		\t{FFFFFF}» Açılacağı tarih: "ANA_RENK"%s", PlayerInfo[playerid][Name], admin, reason, ReturnDate(gettime()+gun*86400));
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}Ban", str, "Tamam", "");
	PlayerInfo[playerid][BanCount]++;
	BanPlayer(playerid);
	return 1;
}
stock NBanReason(playerid, reason[], admin[])
{
	new	str[256], h, m, s, g, a, y;
	gettime(h, m, s), getdate(g, a, y);
	format(str, sizeof(str), "~r~~h~~h~[N-Ban] ~w~~h~~h~%s >>> %s (~y~~h~%s~w~~h~~h~)", admin, PlayerInfo[playerid][Name], reason);
	TextMesaji(TurkceKarakter(str));
	for(new i = 0; i < 20; i++) SendClientMessage(playerid, 0xFFFFFFFF, "");
    format(str, sizeof(str), "{FFFFFF}Hesabınız yasaklandı "ANA_RENK"%s\n\n\
									\t{FFFFFF}» NBanlayan: "ANA_RENK"%s\n\
			    					\t{FFFFFF}» Sebep: "ANA_RENK"%s\n\
							    	\t{FFFFFF}» Saat: "ANA_RENK"%02d:%02d:%02d\n\
							    	\t{FFFFFF}» Tarih: "ANA_RENK"%d/%d/%d", PlayerInfo[playerid][Name], admin, reason, h, m, s, g, a, y);
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}N-Ban", str, "Tamam", "");
    PlayerInfo[playerid][Banned] = 1;
    PlayerInfo[playerid][BanCount]++;
	BanPlayer(playerid);
	return 1;
}
stock RBanReason(playerid, reason[], admin[])
{
	new	str[256], h, m, s, g, a, y;
	gettime(h, m, s), getdate(g, a, y);
	format(str, sizeof(str), "~r~~h~~h~[R-Ban] ~w~~h~~h~%s >>> %s (~y~~h~%s~w~~h~~h~)", admin, PlayerInfo[playerid][Name], reason);
	TextMesaji(TurkceKarakter(str));
	for(new i = 0; i < 20; i++) SendClientMessage(playerid, 0xFFFFFFFF, "");
    format(str, sizeof(str), "{FFFFFF}Hesabınız yasaklandı "ANA_RENK"%s\n\n\
									\t{FFFFFF}» RBanlayan: "ANA_RENK"%s\n\
			    					\t{FFFFFF}» Sebep: "ANA_RENK"%s\n\
							    	\t{FFFFFF}» Saat: "ANA_RENK"%02d:%02d:%02d\n\
							    	\t{FFFFFF}» Tarih: "ANA_RENK"%d/%d/%d", PlayerInfo[playerid][Name], admin, reason, h, m, s, g, a, y);
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}R-Ban", str, "Tamam", "");

	format(str, sizeof(str), "banip %s", PlayerRangeIP(playerid));
	SendRconCommand(str);
	SendRconCommand("reloadbans");

	mysql_format(Owsla, str, sizeof(str), "INSERT INTO `blockip` (`ip`, `player`) VALUES ('%e', '%e')", PlayerRangeIP(playerid), PlayerInfo[playerid][Name]);
	mysql_tquery(Owsla, str);
	
    PlayerInfo[playerid][BanCount]++;
	KickPlayer(playerid);
	return 1;
}
stock PlayerRangeIP(PlayerID)
{
	new RangeIP[16], NormalIP[16], Count;
	GetPlayerIp(PlayerID, NormalIP, 16);
	for(new i = 0; i < 16; i++)
	{
		if(NormalIP[i] == '.')
		{
			Count++;
		}
		if(Count == 2)
		{
			i++;
			strdel(NormalIP, i, 16);
			format(RangeIP, 16, "%s*.*", NormalIP);
		}
	}
	return RangeIP;
}
stock KickPlayer(playerid, sure = 500)
{
	PlayerPlaySound(playerid, 1190, 0.0, 0.0, 10.0);
	SetTimerEx("IslemUygula", sure, false, "dd", playerid, 1);
    return 1;
}
stock BanPlayer(playerid, sure = 500)
{
	PlayerPlaySound(playerid, 1190, 0.0, 0.0, 10.0);
	SetTimerEx("IslemUygula", sure, false, "dd", playerid, 2);
    return 1;
}
function IslemUygula(playerid, islem)
{
	switch(islem)
	{
 		case 1: Kick(playerid);
     	case 2:
 		{
			new str[256];
			mysql_format(Owsla, str, 256, "INSERT INTO `blockip` (`ip`, `player`) VALUES ('%e', '%e')", PlayerInfo[playerid][IP], PlayerInfo[playerid][Name]);
			mysql_tquery(Owsla, str);
			BlockIpAddress(PlayerInfo[playerid][IP], 10800000);
		 	Ban(playerid);
		}
    }
	return 1;
}
stock SpawnEkle(playerid)
{
	new i = Iter_Free(Spawnlar), str[256];
	if(i == -1) return Hata(playerid, "Hata » {FFFFFF}Spawn sınırı dolmuş.");
 	GetPlayerPos(playerid, SpawnInfo[i][spawnX], SpawnInfo[i][spawnY], SpawnInfo[i][spawnZ]), GetPlayerFacingAngle(playerid, SpawnInfo[i][spawnA]);
   	SpawnInfo[i][spawnPickup] = CreateDynamicPickup(1239, 1, SpawnInfo[i][spawnX], SpawnInfo[i][spawnY], SpawnInfo[i][spawnZ], 0, 0, -1);

	format(str, sizeof(str), "::[ "ANA_RENK"Spawn Bölgesi{C0C0C0} ]::\n"ANA_RENK"%s\n{C0C0C0}Zırh-Can'ınızı "ANA_RENK"H tusu {C0C0C0}ile ücretsiz fulleyebilirsiniz.\n{C0C0C0}Spawn silahlarını değiştirmek için "ANA_RENK"/Spawnsilahlari {C0C0C0}komutunu kullanabilirsiniz.", GetZoneName(SpawnInfo[i][spawnX], SpawnInfo[i][spawnY], SpawnInfo[i][spawnZ]));
	SpawnInfo[i][spawn3D] = CreateDynamic3DTextLabel(str, 0xC0C0C0FF, SpawnInfo[i][spawnX], SpawnInfo[i][spawnY], SpawnInfo[i][spawnZ], 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
    SpawnInfo[i][spawnIcon] = CreateDynamicMapIcon(SpawnInfo[i][spawnX], SpawnInfo[i][spawnY], SpawnInfo[i][spawnZ], 36, 0, 0, 0, -1, 200.0);
	SpawnInfo[i][spawnArea] = CreateDynamicRectangle(SpawnInfo[i][spawnX]-45, SpawnInfo[i][spawnY]-45, SpawnInfo[i][spawnX]+45, SpawnInfo[i][spawnY]+45);
    SpawnInfo[i][spawnZone] = GangZoneCreate(SpawnInfo[i][spawnX]-45, SpawnInfo[i][spawnY]-45, SpawnInfo[i][spawnX]+45, SpawnInfo[i][spawnY]+45);
 	Iter_Add(Spawnlar, i);
	GangZoneShowForAll(SpawnInfo[i][spawnZone], 0xFF990066);
	mysql_format(Owsla, str, sizeof(str), "INSERT INTO `spawnlar` (id, spawnx, spawny, spawnz, spawna) VALUES ('%d', '%f', '%f', '%f', '%f')", i, SpawnInfo[i][spawnX], SpawnInfo[i][spawnY], SpawnInfo[i][spawnZ], SpawnInfo[i][spawnA]);
	mysql_tquery(Owsla, str);

	Bilgi(playerid, "Bilgi » {FFFFFF}Spawn eklediniz.");
	return 1;
}

stock SpawnSil(spawnid)
{
	SpawnInfo[spawnid][spawnX] = 0.0;
	SpawnInfo[spawnid][spawnY] = 0.0;
	SpawnInfo[spawnid][spawnZ] = 0.0;
	SpawnInfo[spawnid][spawnA] = 0.0;

	DestroyDynamicPickup(SpawnInfo[spawnid][spawnPickup]), DestroyDynamic3DTextLabel(SpawnInfo[spawnid][spawn3D]), DestroyDynamicArea(SpawnInfo[spawnid][spawnArea]), GangZoneDestroy(SpawnInfo[spawnid][spawnZone]), DestroyDynamicMapIcon(SpawnInfo[spawnid][spawnIcon]);
	Iter_Remove(Spawnlar, spawnid);

	new query[64];
	mysql_format(Owsla, query, sizeof(query), "DELETE FROM `spawnlar` WHERE `id` = '%d'", spawnid);
	mysql_tquery(Owsla, query);
	return 1;
}
function LoadSpawns()
{
	new rows = cache_num_rows();
	if(!rows)
	{
        mysql_tquery(Owsla, "INSERT INTO `spawnlar` (id, spawnx, spawny, spawnz, spawna) VALUES ('0', '0', '5', '0', '90.0000')", "", "");
        mysql_tquery(Owsla, "SELECT * FROM `spawnlar`", "LoadSpawns");
	}else
	{
		new x, loaded, str[256];
	    while(loaded < rows)
		{
	    	cache_get_value_name_int(loaded, "id", x);
	    	cache_get_value_name_float(loaded, "spawnx", SpawnInfo[x][spawnX]);
	    	cache_get_value_name_float(loaded, "spawny", SpawnInfo[x][spawnY]);
	    	cache_get_value_name_float(loaded, "spawnz", SpawnInfo[x][spawnZ]);
	    	cache_get_value_name_float(loaded, "spawna", SpawnInfo[x][spawnA]);
			Iter_Add(Spawnlar, x);
			SpawnInfo[x][spawnPickup] = CreateDynamicPickup(1239, 1, SpawnInfo[x][spawnX], SpawnInfo[x][spawnY], SpawnInfo[x][spawnZ], 0, 0, -1);
		   	format(str, sizeof(str), "::[ "ANA_RENK"Spawn Bölgesi{C0C0C0} ]::\n"ANA_RENK"%s\n{C0C0C0}Zırh-Can'ınızı "ANA_RENK"H tusu {C0C0C0}ile ücretsiz fulleyebilirsiniz.\n{C0C0C0}Spawn silahlarını değiştirmek için "ANA_RENK"/Spawnsilahlari {C0C0C0}komutunu kullanabilirsiniz.", GetZoneName(SpawnInfo[x][spawnX], SpawnInfo[x][spawnY], SpawnInfo[x][spawnZ]));
			SpawnInfo[x][spawn3D] = CreateDynamic3DTextLabel(str, 0xC0C0C0FF, SpawnInfo[x][spawnX], SpawnInfo[x][spawnY], SpawnInfo[x][spawnZ], 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
			SpawnInfo[x][spawnIcon] = CreateDynamicMapIcon(SpawnInfo[x][spawnX], SpawnInfo[x][spawnY], SpawnInfo[x][spawnZ], 36, 0, -1, -1, -1, 200.0);
            SpawnInfo[x][spawnArea] = CreateDynamicRectangle(SpawnInfo[x][spawnX]-45, SpawnInfo[x][spawnY]-45, SpawnInfo[x][spawnX]+45, SpawnInfo[x][spawnY]+45);
			SpawnInfo[x][spawnZone] = GangZoneCreate(SpawnInfo[x][spawnX]-45, SpawnInfo[x][spawnY]-45, SpawnInfo[x][spawnX]+45, SpawnInfo[x][spawnY]+45);
			loaded++;
		}
		printf("[INIT] %d spawn yeri yuklendi.", loaded);
	}
	return 1;
}
function LoadSettings()
{
	new rows = cache_num_rows();
	if(!rows)
	{
	    mysql_tquery(Owsla, "INSERT INTO `server` (MaxPing, Time, Weather, Headshot, Rekor, AntiProxy) VALUES ('300', '12', '0', '1', '0', '1')");
        mysql_tquery(Owsla, "SELECT * FROM `server`", "LoadSettings");
	}else
	if(rows)
	{
		cache_get_value_int(0, "MaxPing", ServerInfo[MaxPing]);
  		cache_get_value_int(0, "Time", ServerInfo[Time]);
  		cache_get_value_int(0, "Weather", ServerInfo[Weather]);
 		cache_get_value_int(0, "Headshot", ServerInfo[Headshot]);
   		cache_get_value_int(0, "Rekor", ServerInfo[Rekor]);
    	cache_get_value_int(0, "AntiProxy", ServerInfo[AntiProxy]);
	}
	printf("[INIT] Max Ping %d", ServerInfo[MaxPing]);
	printf("[INIT] Time %d", ServerInfo[Time]);
	printf("[INIT] Weather %d", ServerInfo[Weather]);
	printf("[INIT] Headshot %d", ServerInfo[Headshot]);
	printf("[INIT] Sunucu rekoru yuklendi. %d/%d", ServerInfo[Rekor], GetMaxPlayers());
    printf("[INIT] AntiProxy %d", ServerInfo[AntiProxy]);
	SetWorldTime(ServerInfo[Time]), SetWeather(ServerInfo[Weather]);
	ServerInfo[Chat] = true;
	return 1;
}
stock ShowConfigDialog(playerid)
{
    new str[512], s[64];
    format(str, sizeof(str), ""ANA_RENK"Ayar\t"ANA_RENK"Veri\n");
	format(s, sizeof(s), ""ANA_RENK"Max Ping\t{FFFFFF}%d\n", ServerInfo[MaxPing]);
	strcat(str, s);
	format(s, sizeof(s), ""ANA_RENK"Server Saati\t{FFFFFF}%d\n", ServerInfo[Time]);
	strcat(str, s);
	format(s, sizeof(s), ""ANA_RENK"Server Havasi\t{FFFFFF}%d\n", ServerInfo[Weather]);
	strcat(str, s);
	format(s, sizeof(s), ""ANA_RENK"Headshot\t%s\n", (ServerInfo[Headshot] == 0) ? ("{FF6666}Kapali") : ("{66FF66}Acik"));
	strcat(str, s);
	format(s, sizeof(s), ""ANA_RENK"Server Kilit Durumu\t%s\n", (ServerInfo[Kilit] == true) ? ("{FF6666}Kilitli") : ("{66FF66}Acik"));
	strcat(str, s);
	format(s, sizeof(s), ""ANA_RENK"Anti Proxy\t%s\n", (ServerInfo[AntiProxy] == 0) ? ("{FF6666}Kapali") : ("{66FF66}Acik"));
	strcat(str, s);
	format(s, sizeof(s), ""ANA_RENK"Ana Chat\t%s", (ServerInfo[Chat] == false) ? ("{FF6666}Kapali") : ("{66FF66}Acik"));
	strcat(str, s);
	ShowPlayerDialog(playerid, DIALOG_CONFIG, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}Config", str, "Sec", "Geri");
	return 1;
}
stock ShowSettingsDialog(playerid)
{
    new str[256], s[64];
    format(str, sizeof(str), ""ANA_RENK"Ayar\t"ANA_RENK"Veri\n");
	format(s, sizeof(s), ""ANA_RENK"Özel Mesaj\t%s", (PlayerInfo[playerid][PMengel] == false) ? ("{FF6666}Pasif") : ("{66FF66}Aktif"));
	strcat(str, s);
	ShowPlayerDialog(playerid, DIALOG_SETTINGS, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}Ayarlar", str, "Sec", "Geri");
	return 1;
}
stock GetZoneName(Float: x, Float: y, Float: z)
{
	new zone[28];
 	for(new i = 0; i < sizeof(SAZones); i++)
 	{
		if(x >= SAZones[i][SAZONE_AREA][0] && x <= SAZones[i][SAZONE_AREA][3] && y >= SAZones[i][SAZONE_AREA][1] && y <= SAZones[i][SAZONE_AREA][4] && z >= SAZones[i][SAZONE_AREA][2] && z <= SAZones[i][SAZONE_AREA][5])
		{
		    strcat(zone, SAZones[i][SAZONE_NAME]);
		    return zone;
		}
	}
	strcat(zone, "Unknown");
	return zone;
}
stock ExpGuncelle(playerid)
{
	if(PlayerInfo[playerid][ExpLevel] >= 1 && PlayerInfo[playerid][ExpLevel] <= 30)
	{
	    if(PlayerInfo[playerid][Exp] >= 0 && PlayerInfo[playerid][Exp] <= LevelLimit(playerid))
	    {
	        new str[256];
	        format(str, sizeof(str), "~r~~h~~h~Exp:~n~~w~~h~%i/%i~n~~b~~h~~h~Level:~n~~w~~h~%i/30",PlayerInfo[playerid][Exp], LevelLimit(playerid), PlayerInfo[playerid][ExpLevel]);
            PlayerTextDrawSetString(playerid, ExpText[playerid], str);
	    }else
		{
		    PlayerInfo[playerid][ExpLevel] ++;
	        ExpGuncelle(playerid);
	        GameTextForPlayer(playerid, "~w~~h~~h~> ~r~~h~Level UP! ~w~~h~~h~<", 5000, 3);
		}
	}
	return 1;
}
stock LevelLimit(id)
{
	new lim = 0;
	switch(PlayerInfo[id][ExpLevel])
	{
	    case 1: lim = 75;
	    case 2: lim = 300;
 		case 3: lim = 600;
 		case 4: lim = 1000;
 		case 5: lim = 1300;
 		case 6: lim = 1600;
 		case 7: lim = 2000;
 		case 8: lim = 2400;
 		case 9: lim = 2800;
 		case 10: lim = 3100;
 		case 11: lim = 3500;
 		case 12: lim = 3800;
 		case 13: lim = 4300;
 		case 14: lim = 4700;
 		case 15: lim = 5100;
 		case 16: lim = 5500;
 		case 17: lim = 5900;
 		case 18: lim = 6500;
 		case 19: lim = 7000;
 		case 20: lim = 9000;
 		case 21: lim = 11000;
 		case 22: lim = 15000;
 		case 23: lim = 17000;
 		case 24: lim = 18000;
 		case 25: lim = 19000;
 		case 26: lim = 20000;
 		case 27: lim = 21000;
 		case 28: lim = 22000;
 		case 29: lim = 23000;
 		case 30: lim = 25000;
	}
	return lim;
}
stock GivePlayerExp(playerid, mik)
{
	PlayerInfo[playerid][Exp] += mik;
	ExpGuncelle(playerid);
	return 1;
}
function TextMesaji(const text[])
{
    foreach(new i: Player) PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
    for(new line; line < 4; line++)
   	{
		MessageStr[line] = MessageStr[line+1];
		TextDrawSetString(OlayText[line], MessageStr[line]);
  	}
    format(MessageStr[4], 1024, "%s",text);
    TextDrawSetString(OlayText[4], MessageStr[4]);
    for(new i; i < 5; i++)
	{
		if(EVT[i] != -1)
		{
			KillTimer(EVT[i]);
		    EVT[i] = -1;
	    }
    }
    EVT[0] = SetTimer("MesajSil0", 3500, false);
    return 1;
}
function MesajSil0()
{
	format(MessageStr[1], 128, "");
	TextDrawSetString(OlayText[0],"");
	EVT[1] = SetTimer("MesajSil1", 3700, false);
	return 1;
}
function MesajSil1()
{
	format(MessageStr[2], 128, "");
	TextDrawSetString(OlayText[1],"");
	EVT[2] = SetTimer("MesajSil2", 3900, false);
	return 1;
}
function MesajSil2()
{
	format(MessageStr[3], 128, "");
	TextDrawSetString(OlayText[2],"");
	EVT[3] = SetTimer("MesajSil3", 4100, false);
	return 1;
}
function MesajSil3()
{
	format(MessageStr[4], 128, "");
	TextDrawSetString(OlayText[3],"");
	EVT[4] = SetTimer("MesajSil4", 4300, false);
	return 1;
}
function MesajSil4()
{
	format(MessageStr[0], 128, "");
	TextDrawSetString(OlayText[4],"");
	return 1;
}
stock LoadPlayerTextdraws(playerid)
{
    HizBar[playerid][0] = CreatePlayerTextDraw(playerid, 635.000000, 404.000000, "I");
	HizBar[playerid][1] = CreatePlayerTextDraw(playerid, 633.000000, 404.000000, "I");
    HizBar[playerid][2] = CreatePlayerTextDraw(playerid, 631.000000, 404.000000, "I");
    HizBar[playerid][3] = CreatePlayerTextDraw(playerid, 629.000000, 404.000000, "I");
    HizBar[playerid][4] = CreatePlayerTextDraw(playerid, 627.000000, 404.000000, "I");
    HizBar[playerid][5] = CreatePlayerTextDraw(playerid, 625.000000, 404.000000, "I");
    HizBar[playerid][6] = CreatePlayerTextDraw(playerid, 623.000000, 404.000000, "I");
    HizBar[playerid][7] = CreatePlayerTextDraw(playerid, 621.000000, 404.000000, "I");
    HizBar[playerid][8] = CreatePlayerTextDraw(playerid, 619.000000, 404.000000, "I");
    HizBar[playerid][9] = CreatePlayerTextDraw(playerid, 617.000000, 404.000000, "I");
    HizBar[playerid][10] = CreatePlayerTextDraw(playerid, 615.000000, 404.000000, "I");
    HizBar[playerid][11] = CreatePlayerTextDraw(playerid, 613.000000, 404.000000, "I");
    HizBar[playerid][12] = CreatePlayerTextDraw(playerid, 611.000000, 404.000000, "I");
    HizBar[playerid][13] = CreatePlayerTextDraw(playerid, 609.000000, 404.000000, "I");
    HizBar[playerid][14] = CreatePlayerTextDraw(playerid, 607.000000, 404.000000, "I");
    HizBar[playerid][15] = CreatePlayerTextDraw(playerid, 605.000000, 404.000000, "I");
    for(new i; i != 16; i++)
	{
		PlayerTextDrawBackgroundColor(playerid,HizBar[playerid][i], 255);
		PlayerTextDrawFont(playerid,HizBar[playerid][i], 1);
		PlayerTextDrawLetterSize(playerid,HizBar[playerid][i], 0.260000, 2.699999);
		PlayerTextDrawColor(playerid,HizBar[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid,HizBar[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid,HizBar[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid,HizBar[playerid][i], 0);
		PlayerTextDrawSetSelectable(playerid,HizBar[playerid][i], 0);
	}
	HizText[playerid] = CreatePlayerTextDraw(playerid,623.000000, 399.000000, "	");
	PlayerTextDrawAlignment(playerid, HizText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, HizText[playerid], 51);
	PlayerTextDrawFont(playerid, HizText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, HizText[playerid], 0.220000, 1.000000);
	PlayerTextDrawColor(playerid, HizText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, HizText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HizText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HizText[playerid], 0);
	
	HizBox[playerid] = CreatePlayerTextDraw(playerid,622.000000, 410.000000, "_");
	PlayerTextDrawAlignment(playerid,HizBox[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,HizBox[playerid], 255);
	PlayerTextDrawFont(playerid,HizBox[playerid], 2);
	PlayerTextDrawLetterSize(playerid,HizBox[playerid], 0.500000, 1.600000);
	PlayerTextDrawColor(playerid,HizBox[playerid], -1);
	PlayerTextDrawSetOutline(playerid,HizBox[playerid], 1);
	PlayerTextDrawSetProportional(playerid,HizBox[playerid], 1);
	PlayerTextDrawUseBox(playerid,HizBox[playerid], 1);
	PlayerTextDrawBoxColor(playerid,HizBox[playerid], 60);
	PlayerTextDrawTextSize(playerid,HizBox[playerid], -2.000000, 33.000000);
	PlayerTextDrawSetSelectable(playerid,HizBox[playerid], 0);
	
	Fps[playerid] = CreatePlayerTextDraw(playerid,625.000000, 5.000000, " ");
	PlayerTextDrawAlignment(playerid, Fps[playerid], 3);
	PlayerTextDrawBackgroundColor(playerid, Fps[playerid], 255);
	PlayerTextDrawFont(playerid, Fps[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Fps[playerid], 0.159999, 1.000000);
	PlayerTextDrawColor(playerid, Fps[playerid], -855677185);
	PlayerTextDrawSetOutline(playerid, Fps[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Kill[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Fps[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, Fps[playerid], 0);

	Ping[playerid] = CreatePlayerTextDraw(playerid, 625.000000, 15.000000, " ");
	PlayerTextDrawAlignment(playerid, Ping[playerid], 3);
	PlayerTextDrawBackgroundColor(playerid, Ping[playerid], 255);
	PlayerTextDrawFont(playerid, Ping[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Ping[playerid], 0.159999, 1.000000);
	PlayerTextDrawColor(playerid, Ping[playerid], 13408767);
	PlayerTextDrawSetOutline(playerid, Ping[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Ping[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Ping[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, Ping[playerid], 0);

	Kill[playerid] = CreatePlayerTextDraw(playerid, 511.000000, 101.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, Kill[playerid], 255);
	PlayerTextDrawFont(playerid, Kill[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Kill[playerid], 0.160000, 1.200000);
	PlayerTextDrawColor(playerid, Kill[playerid], -1711289089);
	PlayerTextDrawSetOutline(playerid, Kill[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Kill[playerid] , 1);
	PlayerTextDrawSetShadow(playerid, Kill[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, Kill[playerid], 0);

	Death[playerid] = CreatePlayerTextDraw(playerid, 511.000000, 115.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, Death[playerid], 255);
	PlayerTextDrawFont(playerid, Death[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Death[playerid], 0.160000, 1.200000);
	PlayerTextDrawColor(playerid, Death[playerid], -3394561);
	PlayerTextDrawSetOutline(playerid, Death[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Death[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Death[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, Death[playerid], 0);

	Ratio[playerid] = CreatePlayerTextDraw(playerid, 568.000000, 101.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, Ratio[playerid], 255);
	PlayerTextDrawFont(playerid, Ratio[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Ratio[playerid], 0.160000, 1.200000);
	PlayerTextDrawColor(playerid, Ratio[playerid], -10027009);
	PlayerTextDrawSetOutline(playerid, Ratio[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Ratio[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Ratio[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, Ratio[playerid], 0);

	Skorr[playerid] = CreatePlayerTextDraw(playerid, 568.000000, 114.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, Skorr[playerid], 255);
	PlayerTextDrawFont(playerid, Skorr[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Skorr[playerid], 0.160000, 1.200000);
	PlayerTextDrawColor(playerid, Skorr[playerid], 1724684799);
	PlayerTextDrawSetOutline(playerid, Skorr[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Skorr[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Skorr[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, Skorr[playerid], 0);

	ExpText[playerid] = CreatePlayerTextDraw(playerid, 626.000000, 98.000000, "	");
	PlayerTextDrawAlignment(playerid, ExpText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, ExpText[playerid], 255);
	PlayerTextDrawFont(playerid, ExpText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ExpText[playerid], 0.129999, 0.899999);
	PlayerTextDrawColor(playerid, ExpText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ExpText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ExpText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ExpText[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, ExpText[playerid], 0);
}
stock LoadTextdraws()
{
	AltText = TextDrawCreate(680.000000, 430.000000, "_");
	TextDrawBackgroundColor(AltText, 255);
	TextDrawFont(AltText, 1);
	TextDrawLetterSize(AltText, 0.500000, 4.000000);
	TextDrawColor(AltText, -1);
	TextDrawSetOutline(AltText, 0);
	TextDrawSetProportional(AltText, 1);
	TextDrawSetShadow(AltText, 1);
	TextDrawUseBox(AltText, 1);
	TextDrawBoxColor(AltText, 68);
	TextDrawTextSize(AltText, -30.000000, 0.000000);
	TextDrawSetSelectable(AltText, 0);

	AltText1 = TextDrawCreate(533.000000, 426.000000, "Owsla~n~    Gaming");
	TextDrawBackgroundColor(AltText1, 68);
	TextDrawFont(AltText1, 2);
	TextDrawLetterSize(AltText1, 0.500000, 1.200000);
	TextDrawColor(AltText1, 1728027135);
	TextDrawSetOutline(AltText1, 1);
	TextDrawSetProportional(AltText1, 1);
	TextDrawSetSelectable(AltText1, 0);

	AltText2 = TextDrawCreate(642.000000, 430.000000, "_");
	TextDrawBackgroundColor(AltText2, 255);
	TextDrawFont(AltText2, 1);
	TextDrawLetterSize(AltText2, 0.500000, 0.599999);
	TextDrawColor(AltText2, -1);
	TextDrawSetOutline(AltText2, 0);
	TextDrawSetProportional(AltText2, 1);
	TextDrawSetShadow(AltText2, 1);
	TextDrawUseBox(AltText2, 1);
	TextDrawBoxColor(AltText2, 68);
	TextDrawTextSize(AltText2, 605.000000, 10.000000);
	TextDrawSetSelectable(AltText2, 0);

	AltText3 = TextDrawCreate(512.000000, 440.000000, "_");
	TextDrawBackgroundColor(AltText3, 255);
	TextDrawFont(AltText3, 1);
	TextDrawLetterSize(AltText3, 0.500000, 0.599999);
	TextDrawColor(AltText3, -1);
	TextDrawSetOutline(AltText3, 0);
	TextDrawSetProportional(AltText3, 1);
	TextDrawSetShadow(AltText3, 1);
	TextDrawUseBox(AltText3, 1);
	TextDrawBoxColor(AltText3, 68);
	TextDrawTextSize(AltText3, 556.000000, 10.000000);
	TextDrawSetSelectable(AltText3, 0);

	AltText4 = TextDrawCreate(437.000000, 437.000000, "~w~~h~~h~www.~r~~h~~h~OwslaGaming~w~~h~~h~.com");
	TextDrawBackgroundColor(AltText4, 51);
	TextDrawFont(AltText4, 2);
	TextDrawLetterSize(AltText4, 0.140000, 1.100000);
	TextDrawColor(AltText4, -1811966977);
	TextDrawSetOutline(AltText4, 1);
	TextDrawSetProportional(AltText4, 1);
	TextDrawSetSelectable(AltText4, 0);

	AltText5 = TextDrawCreate(-18.000000, 430.000000, "_");
	TextDrawBackgroundColor(AltText5, 255);
	TextDrawFont(AltText5, 1);
	TextDrawLetterSize(AltText5, 0.500000, 0.599999);
	TextDrawColor(AltText5, -1);
	TextDrawSetOutline(AltText5, 0);
	TextDrawSetProportional(AltText5, 1);
	TextDrawSetShadow(AltText5, 1);
	TextDrawUseBox(AltText5, 1);
	TextDrawBoxColor(AltText5, 68);
	TextDrawTextSize(AltText5, 529.000000, 10.000000);
	TextDrawSetSelectable(AltText5, 0);

	AltText6 = TextDrawCreate(-19.000000, 440.000000, "_");
	TextDrawBackgroundColor(AltText6, 255);
	TextDrawFont(AltText6, 1);
	TextDrawLetterSize(AltText6, 0.500000, 0.599999);
	TextDrawColor(AltText6, -1);
	TextDrawSetOutline(AltText6, 0);
	TextDrawSetProportional(AltText6, 1);
	TextDrawSetShadow(AltText6, 1);
	TextDrawUseBox(AltText6, 1);
	TextDrawBoxColor(AltText6, 68);
	TextDrawTextSize(AltText6, 433.000000, 10.000000);
	TextDrawSetSelectable(AltText6, 0);

	TuyoText = TextDrawCreate(3.000000, 428.000000, "~b~~h~~h~#Tuyo 0: ~w~~h~~h~Online adminleri gormek icin ~r~~h~~h~/Admins ~w~~h~~h~komutunu kullanabilirsiniz.");
	TextDrawBackgroundColor(TuyoText, 34);
	TextDrawFont(TuyoText, 1);
	TextDrawLetterSize(TuyoText, 0.180000, 0.899999);
	TextDrawColor(TuyoText, -1);
	TextDrawSetOutline(TuyoText, 1);
	TextDrawSetProportional(TuyoText, 1);
	TextDrawSetSelectable(TuyoText, 0);

	NewsText = TextDrawCreate(3.000000, 438.000000, "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~Serverimi favorilere eklemeyi unutmayin!");
	TextDrawBackgroundColor(NewsText, 34);
	TextDrawFont(NewsText, 1);
	TextDrawLetterSize(NewsText, 0.180000, 0.899999);
	TextDrawColor(NewsText, -1);
	TextDrawSetOutline(NewsText, 1);
	TextDrawSetProportional(NewsText, 1);
	TextDrawSetSelectable(NewsText, 0);

 	OlayText[0] = TextDrawCreate(320.000000, 360.000000, MessageStr[0]);
 	OlayText[1] = TextDrawCreate(320.000000, 374.000000, MessageStr[1]);
	OlayText[2] = TextDrawCreate(320.000000, 388.000000, MessageStr[2]);
 	OlayText[3] = TextDrawCreate(320.000000, 402.000000, MessageStr[3]);
  	OlayText[4] = TextDrawCreate(320.000000, 416.000000, MessageStr[4]);
    for(new ex; ex < 5; ex++)
	{
		TextDrawAlignment(OlayText[ex], 2);
		TextDrawBackgroundColor(OlayText[ex], 34);
		TextDrawFont(OlayText[ex], 1);
		TextDrawLetterSize(OlayText[ex], 0.160000, 1.000000);
		TextDrawColor(OlayText[ex], -1);
		TextDrawSetOutline(OlayText[ex], 1);
		TextDrawSetProportional(OlayText[ex], 1);
		TextDrawUseBox(OlayText[ex], 1);
		TextDrawBoxColor(OlayText[ex], 68);
		TextDrawTextSize(OlayText[ex], 12.000000, 354.000000);
		TextDrawSetSelectable(OlayText[ex], 0);
	}
	
	KillBox = TextDrawCreate(611.000000, 101.000000, "_");
	TextDrawBackgroundColor(KillBox, 255);
	TextDrawFont(KillBox, 1);
	TextDrawLetterSize(KillBox, 0.500000, 3.099999);
	TextDrawColor(KillBox, -1);
	TextDrawSetOutline(KillBox, 0);
	TextDrawSetProportional(KillBox, 1);
	TextDrawSetShadow(KillBox, 1);
	TextDrawUseBox(KillBox, 1);
	TextDrawBoxColor(KillBox, 68);
	TextDrawTextSize(KillBox, 496.000000, 30.000000);
	TextDrawSetSelectable(KillBox, 0);

	KillSprite = TextDrawCreate(501.000000, 101.000000, "hud:radar_ammugun");
	TextDrawBackgroundColor(KillSprite, 255);
	TextDrawFont(KillSprite, 4);
	TextDrawLetterSize(KillSprite, 0.500000, 0.699999);
	TextDrawColor(KillSprite, -1);
	TextDrawSetOutline(KillSprite, 0);
	TextDrawSetProportional(KillSprite, 1);
	TextDrawSetShadow(KillSprite, 1);
	TextDrawUseBox(KillSprite, 1);
	TextDrawBoxColor(KillSprite, 255);
	TextDrawTextSize(KillSprite, 8.000000, 10.000000);
	TextDrawSetSelectable(KillSprite, 0);

	DeathSprite = TextDrawCreate(501.000000, 115.000000, "hud:radar_locosyndicate");
	TextDrawBackgroundColor(DeathSprite, 255);
	TextDrawFont(DeathSprite, 4);
	TextDrawLetterSize(DeathSprite, 0.500000, 0.699999);
	TextDrawColor(DeathSprite, -1);
	TextDrawSetOutline(DeathSprite, 0);
	TextDrawSetProportional(DeathSprite, 1);
	TextDrawSetShadow(DeathSprite, 1);
	TextDrawUseBox(DeathSprite, 1);
	TextDrawBoxColor(DeathSprite, 255);
	TextDrawTextSize(DeathSprite, 8.000000, 10.000000);
	TextDrawSetSelectable(DeathSprite, 0);

	DeathSprite2 = TextDrawCreate(559.000000, 102.000000, "hud:radar_locosyndicate");
	TextDrawBackgroundColor(DeathSprite2, 255);
	TextDrawFont(DeathSprite2, 4);
	TextDrawLetterSize(DeathSprite2, 0.500000, 0.699999);
	TextDrawColor(DeathSprite2, -1);
	TextDrawSetOutline(DeathSprite2, 0);
	TextDrawSetProportional(DeathSprite2, 1);
	TextDrawSetShadow(DeathSprite2, 1);
	TextDrawUseBox(DeathSprite2, 1);
	TextDrawBoxColor(DeathSprite2, 255);
	TextDrawTextSize(DeathSprite2, 8.000000, 10.000000);
	TextDrawSetSelectable(DeathSprite2, 0);

	KillSprite2 = TextDrawCreate(556.000000, 101.000000, "hud:radar_ammugun");
	TextDrawBackgroundColor(KillSprite2, 255);
	TextDrawFont(KillSprite2, 4);
	TextDrawLetterSize(KillSprite2, 0.500000, 0.699999);
	TextDrawColor(KillSprite2, -1);
	TextDrawSetOutline(KillSprite2, 0);
	TextDrawSetProportional(KillSprite2, 1);
	TextDrawSetShadow(KillSprite2, 1);
	TextDrawUseBox(KillSprite2, 1);
	TextDrawBoxColor(KillSprite2, 255);
	TextDrawTextSize(KillSprite2, 8.000000, 10.000000);
	TextDrawSetSelectable(KillSprite2, 0);

	SkorSprite = TextDrawCreate(559.000000, 115.000000, "hud:radar_sweet");
	TextDrawBackgroundColor(SkorSprite, 255);
	TextDrawFont(SkorSprite, 4);
	TextDrawLetterSize(SkorSprite, 0.500000, 0.699999);
	TextDrawColor(SkorSprite, -1);
	TextDrawSetOutline(SkorSprite, 0);
	TextDrawSetProportional(SkorSprite, 1);
	TextDrawSetShadow(SkorSprite, 1);
	TextDrawUseBox(SkorSprite, 1);
	TextDrawBoxColor(SkorSprite, 255);
	TextDrawTextSize(SkorSprite, 8.000000, 10.000000);
	TextDrawSetSelectable(SkorSprite, 0);

	FpsBox = TextDrawCreate(641.000000, 4.000000, "_");
	TextDrawBackgroundColor(FpsBox, 255);
	TextDrawFont(FpsBox, 1);
	TextDrawLetterSize(FpsBox, 0.360000, 2.399998);
	TextDrawColor(FpsBox, 3407871);
	TextDrawSetOutline(FpsBox, 0);
	TextDrawSetProportional(FpsBox, 1);
	TextDrawSetShadow(FpsBox, 1);
	TextDrawUseBox(FpsBox, 1);
	TextDrawBoxColor(FpsBox, 68);
	TextDrawTextSize(FpsBox, 587.000000, 11.000000);
	TextDrawSetSelectable(FpsBox, 0);

	FpsSprite = TextDrawCreate(628.000000, 4.000000, "ld_none:warp");
	TextDrawBackgroundColor(FpsSprite, 255);
	TextDrawFont(FpsSprite, 4);
	TextDrawLetterSize(FpsSprite, 0.500000, 1.000000);
	TextDrawColor(FpsSprite, -1);
	TextDrawSetOutline(FpsSprite, 0);
	TextDrawSetProportional(FpsSprite, 1);
	TextDrawSetShadow(FpsSprite, 1);
	TextDrawUseBox(FpsSprite, 1);
	TextDrawBoxColor(FpsSprite, 255);
	TextDrawTextSize(FpsSprite, 10.000000, 10.000000);
	TextDrawSetSelectable(FpsSprite, 0);

	PingSprite = TextDrawCreate(628.000000, 15.000000, "hud:radar_light");
	TextDrawBackgroundColor(PingSprite, 255);
	TextDrawFont(PingSprite, 4);
	TextDrawLetterSize(PingSprite, 0.500000, 1.000000);
	TextDrawColor(PingSprite, -1);
	TextDrawSetOutline(PingSprite, 0);
	TextDrawSetProportional(PingSprite, 1);
	TextDrawSetShadow(PingSprite, 1);
	TextDrawUseBox(PingSprite, 1);
	TextDrawBoxColor(PingSprite, 255);
	TextDrawTextSize(PingSprite, 10.000000, 10.000000);
	TextDrawSetSelectable(PingSprite, 0);
	
	ExpBox = TextDrawCreate(641.000000, 97.000000, "_");
	TextDrawBackgroundColor(ExpBox, 255);
	TextDrawFont(ExpBox, 1);
	TextDrawLetterSize(ExpBox, 0.500000, 3.999999);
	TextDrawColor(ExpBox, -1);
	TextDrawSetOutline(ExpBox, 0);
	TextDrawSetProportional(ExpBox, 1);
	TextDrawSetShadow(ExpBox, 1);
	TextDrawUseBox(ExpBox, 1);
	TextDrawBoxColor(ExpBox, 68);
	TextDrawTextSize(ExpBox, 609.000000, -31.000000);
	TextDrawSetSelectable(ExpBox, 0);
	
 	SaatBox = TextDrawCreate(577.000000, 57.000000, "_");
	TextDrawAlignment(SaatBox, 2);
	TextDrawBackgroundColor(SaatBox, 255);
	TextDrawFont(SaatBox, 2);
	TextDrawLetterSize(SaatBox, 0.290000, 0.700000);
	TextDrawColor(SaatBox, -1);
	TextDrawSetOutline(SaatBox, 0);
	TextDrawSetProportional(SaatBox, 1);
	TextDrawSetShadow(SaatBox, 0);
	TextDrawUseBox(SaatBox, 1);
	TextDrawBoxColor(SaatBox, 68);
	TextDrawTextSize(SaatBox, 30.000000, 58.000000);
	TextDrawSetSelectable(SaatBox, 0);

	Saatx = TextDrawCreate(577.000000, 55.000000, "	");
	TextDrawAlignment(Saatx, 2);
	TextDrawBackgroundColor(Saatx, 255);
	TextDrawFont(Saatx, 2);
	TextDrawLetterSize(Saatx, 0.260000, 1.000000);
	TextDrawColor(Saatx, -1);
	TextDrawSetOutline(Saatx, 0);
	TextDrawSetProportional(Saatx, 1);
	TextDrawSetShadow(Saatx, 0);
	TextDrawSetSelectable(Saatx, 0);
}
stock GetVehicleSpeed(vehicleid)
{
	new Float:Pos[3],Float:ARRAY ;
	GetVehicleVelocity(vehicleid, Pos[0], Pos[1], Pos[2]);
	ARRAY = floatsqroot(Pos[0]*Pos[0] + Pos[1]*Pos[1] + Pos[2]*Pos[2])*180;
	return floatround(ARRAY,floatround_round);
}
stock IsNumeric(const str[])
{
	for(new i = 0, j = strlen(str); i < j; i++)
	{
		if (str[i] > '9' || str[i] < '0') return 0;
	}
    return 1;
}
stock AracIsimiGiris(vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if(strfind(AracIsimler[i], vname, true) != -1) return i + 400;
	}
	return -1;
}
function GenelTimer()
{
    msg_Timer++;
    host_Timer++;
    news_Timer++;
    odul_timer++;
	if(msg_Timer >= 10)
	{
	    msg_Timer = 0;
        UpdateTuyo();
	}
	if(host_Timer >= 3)
	{
	    host_Timer = 0;
	    UpdateHostname();
	}
	if(news_Timer >= 30)
	{
	    news_Timer = 0;
	    if(Iter_Count(Player) > 0) UpdateNews();
	}
	if(odul_timer >= 60+60+60+60+60+60+60+60+60+60)
	{
	    odul_timer = 0;
	    foreach(new i: Player)
	    {
	        if(PlayerInfo[i][VIP] > 0)
	        {
	            GivePlayerCash(i, 1000);
	            GivePlayerScore(i, 2);
	        }
	        
	    }
	}
	foreach(new i: Player)
	{
	    if(GetPlayerPing(i) >= ServerInfo[MaxPing]) return KickReason(i, "High Ping", "Sistem");
		if(AnimCek(i))
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(i, x, y, z);
			if(z > 1.0)
			{
				if(!PosCek(i)) return KickReason(i, "Fly Hack", "Sistem");
			}
		}
	    UpdateTablo(i);
	}
	new exSaat, exDakika, exSaniye, exstr[50];
	gettime(exSaat, exDakika, exSaniye);
	format(exstr, sizeof(exstr),"~w~~h~%02d~g~~h~~h~:~w~~h~%02d~g~~h~~h~:~w~~h~%02d", exSaat, exDakika, exSaniye);
	TextDrawSetString(Saatx, exstr);
	if(exSaat == 0)
	{
	    mysql_tquery(Owsla, "DELETE FROM `blockip` WHERE `times` < (CURRENT_TIMESTAMP-10800)");
	}
	return 1;
}
stock UpdateNews()
{
	new highestid = INVALID_PLAYER_ID, highest = -1;
	new newsStr[180];
	switch(random(8))
	{
		case 0:
  		{
			foreach(new i : Player)
			{
				if(GetPlayerPing(i) > highest)
				{
					highestid = i;
					highest = GetPlayerPing(i);
				}
			}
	  		if(highestid != INVALID_PLAYER_ID)
	  		{
	    		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~En lagger oyuncu ~y~%s ~w~~h~~h~(~p~~h~%d Ping~w~~h~~h~)", PlayerInfo[highestid][Name], GetPlayerPing(highestid));
	      		TextDrawSetString(NewsText, newsStr);
	        }
		}
		case 1:
  		{
			foreach(new i : Player)
			{
				if(GetPlayerCash(i) > highest)
				{
					highestid = i;
					highest = GetPlayerCash(i);
				}
			}
	  		if(highestid != INVALID_PLAYER_ID)
	  		{
	    		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~En zengin oyuncu ~y~%s ~w~~h~~h~(~p~~h~$%s~w~~h~~h~)", PlayerInfo[highestid][Name], formatInt(GetPlayerCash(highestid)));
	      		TextDrawSetString(NewsText, newsStr);
	        }
		}
		case 2:
  		{
			foreach(new i : Player)
			{
				if(GetPlayerScore(i) > highest)
				{
					highestid = i;
					highest = GetPlayerScore(i);
				}
			}
	  		if(highestid != INVALID_PLAYER_ID)
	  		{
	    		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~En skorer oyuncu ~y~%s ~w~~h~~h~(~p~~h~%d skor~w~~h~~h~)", PlayerInfo[highestid][Name], GetPlayerScore(highestid));
	      		TextDrawSetString(NewsText, newsStr);
	        }
		}
		case 3:
  		{
			foreach(new i : Player)
			{
				if(PlayerInfo[i][Kills] > highest)
				{
					highestid = i;
					highest = PlayerInfo[i][Kills];
				}
			}
	  		if(highestid != INVALID_PLAYER_ID)
	  		{
	    		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~En acimasiz oyuncu ~y~%s ~w~~h~~h~(~p~~h~%d kill~w~~h~~h~)", PlayerInfo[highestid][Name], PlayerInfo[highestid][Kills]);
	      		TextDrawSetString(NewsText, newsStr);
	        }
		}
		case 4:
  		{
			foreach(new i : Player)
			{
				if(PlayerInfo[i][Deaths] > highest)
				{
					highestid = i;
					highest = PlayerInfo[i][Deaths];
				}
			}
	  		if(highestid != INVALID_PLAYER_ID)
	  		{
	    		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~En noob oyuncu ~y~%s ~w~~h~~h~(~p~~h~%d death~w~~h~~h~)", PlayerInfo[highestid][Name], PlayerInfo[highestid][Deaths]);
	      		TextDrawSetString(NewsText, newsStr);
	        }
		}
		case 5:
  		{
			foreach(new i : Player)
			{
				if(PlayerInfo[i][WarnCount] > highest)
				{
					highestid = i;
					highest = PlayerInfo[i][WarnCount];
				}
			}
	  		if(highestid != INVALID_PLAYER_ID)
	  		{
	    		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~En cok uyari alan oyuncu ~y~%s ~w~~h~~h~(~p~~h~%d warn~w~~h~~h~)", PlayerInfo[highestid][Name], PlayerInfo[highestid][WarnCount]);
	      		TextDrawSetString(NewsText, newsStr);
	        }
		}
		case 6:
  		{
			foreach(new i : Player)
			{
				if(PlayerInfo[i][KickCount] > highest)
				{
					highestid = i;
					highest = PlayerInfo[i][KickCount];
				}
			}
	  		if(highestid != INVALID_PLAYER_ID)
	  		{
	    		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~En cok kick yiyen oyuncu ~y~%s ~w~~h~~h~(~p~~h~%d kick~w~~h~~h~)", PlayerInfo[highestid][Name], PlayerInfo[highestid][KickCount]);
	      		TextDrawSetString(NewsText, newsStr);
	        }
		}
		case 7:
  		{
			foreach(new i : Player)
			{
				if(PlayerInfo[i][BanCount] > highest)
				{
					highestid = i;
					highest = PlayerInfo[i][BanCount];
				}
			}
	  		if(highestid != INVALID_PLAYER_ID)
	  		{
	    		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~En cok ban yiyen oyuncu ~y~%s ~w~~h~~h~(~p~~h~%d ban~w~~h~~h~)", PlayerInfo[highestid][Name], PlayerInfo[highestid][BanCount]);
	      		TextDrawSetString(NewsText, newsStr);
	        }
		}
    }
	if(highestid == INVALID_PLAYER_ID)
	{
		TextDrawSetString(NewsText, "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~w~~h~~h~Serverimizi favorilere eklemeyi unutmayin!");
	}
	return 1;
}
function UpdateTuyo()
{
	new str[128];
	switch(SiraEx)
	{
	    case 0: format(str, sizeof(str), "~b~~h~~h~#Tuyo 0: ~w~~h~~h~Online yetkilileri gormek icin ~r~~h~~h~/Admins ~w~~h~~h~komutunu kullanabilirsiniz."), SiraEx = 1;
        case 1: format(str, sizeof(str), "~b~~h~~h~#Tuyo 1: ~w~~h~~h~Oyun ayarlarınızı değiştirmek isterseniz ~r~~h~~h~/Ayarlar ~w~~h~~h~komutunu kullanabilirsiniz."), SiraEx = 2;
        case 2: format(str, sizeof(str), "~b~~h~~h~#Tuyo 2: ~w~~h~~h~Oyunda hileci gorduyseniz ~r~~h~~h~/Report ~w~~h~~h~komutunu kullanabilirsiniz."), SiraEx = 3;
        case 3: format(str, sizeof(str), "~b~~h~~h~#Tuyo 3: ~w~~h~~h~Oyunda gordugunuz buglari ~r~~h~~h~/Bugrapor ~w~~h~~h~komutunu kullanarak yetkililere bildirebilirsiniz."), SiraEx = 4;
        case 4: format(str, sizeof(str), "~b~~h~~h~#Tuyo 4: ~w~~h~~h~Hesabinizda aldiginiz cezalarin sayisini ~r~~h~~h~/Cezalarim ~w~~h~~h~komutunu kullanarak öğrenebilirsin."), SiraEx = 0;
	}
	TextDrawSetString(TuyoText, TurkceKarakter(str));
	return 1;
}
function UpdateHostname()
{
	switch(random(5))
	{
	    case 0: SendRconCommand("hostname .·¥·. Owsla »» Race/Stunt/Gangwars/Freeroam ««"), SetGameModeText("Race/Stunt/Gangwars/Freeroam");
	    case 1: SendRconCommand("hostname .·¥·. Owsla »» Freeroam/DM/Minigames/Gangs ««"), SetGameModeText("Freeroam/DM/Minigames/Gangs");
	    case 2: SendRconCommand("hostname .·¥·. Owsla »» Stunt/DM/Race/Derby/Minigames ««"), SetGameModeText("Stunt/DM/Race/Derby/Minigames");
	    case 3: SendRconCommand("hostname .·¥·. Owsla »» Derby/Stunt/Race/DM/Event ««"), SetGameModeText("Derby/Stunt/Race/DM/Event");
	    case 4: SendRconCommand("hostname .·¥·. Owsla »» Duello/GangWar/Quiz/Loto ««"), SetGameModeText("Duello/GangWar/Quiz/Loto");
	}
	return 1;
}
stock UpdateTablo(playerid)
{
	new str[78];
	format(str, sizeof(str),"Oldurme: ~w~~h~~h~%04d", PlayerInfo[playerid][Kills]);
	PlayerTextDrawSetString(playerid, Kill[playerid], str);
	
	format(str, sizeof(str),"Olum: ~w~~h~~h~%04d", PlayerInfo[playerid][Deaths]);
	PlayerTextDrawSetString(playerid, Death[playerid], str);
	
	format(str, sizeof(str),"Ratio: ~w~~h~~h~%.1f", floatdiv(PlayerInfo[playerid][Kills], PlayerInfo[playerid][Deaths]));
	PlayerTextDrawSetString(playerid, Ratio[playerid], str);
	
	format(str, sizeof(str),"Skor: ~w~~h~~h~%04d", GetPlayerScore(playerid));
	PlayerTextDrawSetString(playerid, Skorr[playerid], str);

	new efps = GetPlayerFPS(playerid);
	if((efps > 0) && (efps < 300))
	{
	    PlayerInfo[playerid][pFPS] = efps;
	}
	format(str, sizeof(str),"FPS: ~w~~h~~h~%03d", PlayerInfo[playerid][pFPS]);
	PlayerTextDrawSetString(playerid, Fps[playerid], str);
	
	format(str, sizeof(str),"Ping: ~w~~h~~h~%03d",GetPlayerPing(playerid));
	PlayerTextDrawSetString(playerid, Ping[playerid], str);
	return 1;
}
stock HataliKomut(playerid, komut[])
{
	new str2[128],str[56], count = 0;
	for(new i = 0; i < sizeof(OyuncuKomutlari); i++)
	{
  		new namelen = strlen(OyuncuKomutlari[i]);
  		for(new pos = 0; pos <= namelen; pos++)
		{
			if(strfind(OyuncuKomutlari[i], komut, true) == pos)
			{
			    if(count == 3) break;
			    count++;
				format(str, sizeof(str), "%s%s\n", str, OyuncuKomutlari[i][kIsim]);
			}
		}
 	}
 	switch(count)
 	{
		case 0: format(str2, sizeof(str2), "Hata » {FFFFFF}Bilinmeyen komut.");
		case 1: format(str2, sizeof(str2), "Hata » {FFFFFF}Bilinmeyen komut. Yakın komut %s", str);
		case 2, 3: format(str2, sizeof(str2), "Hata » {FFFFFF}Bilinmeyen komut. Yakın komutlar %s", str);
 	}
	return Hata(playerid, str2);
}
stock ConvertTimer(time)
{
	new verilenSure = time / 1000;
	return floatround(verilenSure);
}
stock SureYasagi(playerid, _0xyasakIsim[], _n0xsure)
{
	new _v3r1[35], str[128], _@0xsaniye;
	format(_v3r1, sizeof(_v3r1), "nTempSure_%s", _0xyasakIsim);
	if(GetPVarInt(playerid, _v3r1) > GetTickCount())
	{
	    new verilenSure = (GetPVarInt(playerid, _v3r1) - GetTickCount()) / 1000;
		_@0xsaniye = floatround(verilenSure);
		format(str, sizeof(str), "Hata » {FFFFFF}Tekrar kullanmanız için {FF0000}%d {FFFFFF}saniye var.", _@0xsaniye);
	    return Hata(playerid, str);
	}else
	{
	    SetPVarInt(playerid, _v3r1, GetTickCount() + _n0xsure * 1000);
	    return 0;
	}
}
stock formatInt(value)
{
    new strx[24];
    format(strx, sizeof(strx), "%d", value);
    for(new i = (strlen(strx) - 3); i > (value < 0 ? 1 : 0) ; i -= 3)
    {
        strins(strx[i], ",", 0);
	}
    return strx;
}
stock GivePlayerCash(playerid, money)
{
	PlayerInfo[playerid][AntiCash] += money;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerInfo[playerid][AntiCash]);
	return 1;
}
stock ResetPlayerCash(playerid)
{
    PlayerInfo[playerid][AntiCash] = 0;
	ResetPlayerMoney(playerid);
	return 1;
}
stock GetPlayerCash(playerid) return PlayerInfo[playerid][AntiCash];
stock ColouredText(text[])
{
	new tstr[16], I = -1,str[256];
    strmid(str, text, 0, 128, sizeof(str));
    for(new C = 0; C != sizeof(ColorsTag); C ++)
    {
        format(tstr, sizeof(tstr), "(%s)", ColorsTag[C][ColorName]);
        while((I = strfind(str, tstr, true, (I + 1))) != -1)
        {
            new tLen = strlen(tstr);
            format(tstr, sizeof(tstr), "{%s}", ColorsTag[C][ColorID]);
            if(tLen < 8) for(new C2 = 0; C2 != (8 - tLen); C2 ++) strins(str, " ", I);
            for(new tVar; ((str[I] != 0) && (tVar != 8)); I ++, tVar ++) str[I] = tstr[tVar];
            if(tLen > 8) strdel(str, I, (I + (tLen - 8)));
        }
    }
    return str;
}
stock IsValidWeapon(weaponid)
{
    if(weaponid >= 0 && weaponid < 19 || weaponid > 21 && weaponid < 47) return 1;
    return 0;
}
stock IsVehicleEmpty(vehicleid)
{
	foreach(new i: Player) if(IsPlayerInVehicle(i, vehicleid)) return 0;
	return 1;
}
stock VipSureKontrol(playerid)
{
    new str[210];
    if(PlayerInfo[playerid][VIP] > 0)
    {
		if(PlayerInfo[playerid][VIPSure] <= gettime())
		{
		    PlayerInfo[playerid][VIP] = 0;
		    PlayerInfo[playerid][VIPSure] = 0;
		    Bilgi(playerid, "Bilgi » {FFFFFF}Vip süreniz sona erdi, artık vip değilsiniz.");

			mysql_format(Owsla, str, sizeof(str),"UPDATE `oyuncular` SET `VIP` = '0', `VIPSure` = '0' WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
			mysql_tquery(Owsla, str);
		}else
		{
			format(str, sizeof(str), "Bilgi » {FFFFFF}Sunucuya %s {FFFFFF}olarak giriş yaptınız. Vip bitiş tarihi %s", GetVipLevel(playerid), ReturnDate(PlayerInfo[playerid][VIPSure]));
			Bilgi(playerid, str);
		}
	}
	return 1;
}
stock GetVipLevel(playerid)
{
	new rutbe[40];
	switch(PlayerInfo[playerid][VIP])
	{
	    case 1: rutbe = "{FF00FF}Bronz Vip";
	    case 2: rutbe = "{B8860B}Gümüş Vip";
	    case 3: rutbe = "{AFAFAF}Elmas Vip";
	}
	return rutbe;
}
stock DriverCheck(vehicleid)
{
	foreach(new i: Player)
	{
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return 1;
	}
	return 0;
}
stock AnimCek(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new animcik[32], animismine[32];
		GetAnimationName(GetPlayerAnimationIndex(playerid),animcik,32,animismine,32);
		if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_GLIDE", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_BREAST", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_CRAWL", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_DIVE_UNDER", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_DIVE_GLIDE", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_UNDER", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_TREAD", true)) return 1;
		else if(GetPlayerWeapon(playerid) != 46)
		{
			if(!strcmp(animcik, "PARACHUTE", true) && !strcmp(animismine, "FALL_SkyDive_Accel", true)) return 1;
			if(!strcmp(animcik, "PARACHUTE", true) && !strcmp(animismine, "FALL_SKYDIVE", true)) return 1;
		}
	}
	return 0;
}
stock PosCek(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if((x >= -1408.0629 && y >= 2021.0587 && x <= -460.9319 && y <= 2861.4893) || (x >= 1269.5886 && y >= -810.4507 && x <= 1288.8916 && y <= -800.5959) ||
	   (x >= 1086.6010 && y >= -683.6998 && x <= 1103.0225 && y <= -662.1832) || (x >= 169.6879 && y >= -1392.6630 && x <= 281.5444 && y <= -1168.9749) ||
	   (x >= -828.3018 && y >= -2107.1487 && x <= -443.5032 && y <= -1855.6273) || (x >= 1198.9982 && y >= -2407.0581 && x <= 1275.7397 && y <= -2341.6262) ||
	   (x >= 2293.1467 && y >= -1432.5869 && x <= 2331.7388 && y <= -1397.6476) || (x >= 1915.3196 && y >= -1236.2382 && x <= 2016.6565 && y <= -1167.9290) ||
	   (x >= -2747.1692 && y >= -510.1152 && x <= -2663.2468 && y <= -411.4905) || (x >= 1838.8041 && y >= 1463.2024 && x <= 2035.4167 && y <= 1703.0480) ||
 	   (x >= 2049.6646 && y >= 1843.3029 && x <= 2119.9021 && y <= 1983.5464) || (x >= 2094.9255 && y >= 1085.2852 && x <= 2179.1790 && y <= 1183.0610) ||
	   (x >= 2545.3718 && y >= 2347.7112 && x <= 2593.6794 && y <= 2403.8040))
	{
		return 1;
	}
	return 0;
}
stock ReturnDate(time)
{
	new str[84], values[6], monthname[15];
    TimestampToDate(time, values[0], values[1], values[2], values[3], values[4], values[5], 0);
	switch(values[1])
	{
	    case 1: monthname = "Ocak";
	    case 2: monthname = "Subat";
	    case 3: monthname = "Mart";
	    case 4: monthname = "Nisan";
	    case 5: monthname = "Mayis";
	    case 6: monthname = "Haziran";
	    case 7: monthname = "Temmuz";
	    case 8: monthname = "Agustos";
	    case 9: monthname = "Eylul";
	    case 10: monthname = "Ekim";
	    case 11: monthname = "Kasim";
	    case 12: monthname = "Aralik";
	}
    format(str, sizeof(str), "%02i/%s/%i | %02i:%02i:%02i", values[2], monthname, values[0], values[3], values[4], values[5]);
    return str;
}
stock IsLeapYear(year)
{
	if(year % 4 == 0) return 1;
	else return 0;
}
stock TimestampToDate(Timestamp, &year, &month, &day, &hour, &minute, &second, HourGMT, MinuteGMT = 0)
{
	new tmp = 2;
 	year = 1970;
  	month = 1;
   	Timestamp -= 172800;
    for(;;)
    {
    	if(Timestamp >= 31536000)
     	{
      		year ++;
        	Timestamp -= 31536000;
         	tmp ++;
          	if(tmp == 4)
           	{
            	if(Timestamp >= 31622400)
             	{
              		tmp = 0;
                	year ++;
                 	Timestamp -= 31622400;
               	}
                else break;
			}
		}
  		else break;
    }
    for(new i = 0; i < 12; i ++)
    {
    	if(Timestamp >= MonthTimes[i][2 + IsLeapYear(year)])
     	{
      		month ++;
        	Timestamp -= MonthTimes[i][2 + IsLeapYear(year)];
		}
  		else break;
    }
    day = 1 + (Timestamp / 86400);
    Timestamp %= 86400;
    hour = HourGMT + (Timestamp / 3600);
    Timestamp %= 3600;
    minute = MinuteGMT + (Timestamp / 60);
    second = (Timestamp % 60);
    if(minute > 59)
    {
    	minute = 0;
     	hour ++;
      	if(hour > 23)
       	{
        	hour -= 24;
         	day ++;
          	if(day > MonthTimes[month][IsLeapYear(year)])
           	{
            	day = 1;
             	month ++;
              	if(month > 12)
               	{
              		month = 1;
                	year ++;
               	}
			}
		}
	}
	return 1;
}
function CheckSBanList(playerid)
{
 	new rows = cache_num_rows();
	if(!rows) return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}UnBan","{FFFFFF}SBanlı kimse bulunamadı.", "Tamam", "");
	new isim[24], str[1024], time[32], ipadress[16], varname[32];
	format(str, sizeof(str), "{FFFFFF}#\t{FFFFFF}Oyuncu Ismi\t{FFFFFF}Tarih\n");
	for(new i; i < rows; i++)
	{
		format(varname, sizeof(varname), "SBanOpName_%d", i);
		cache_get_value_index(i, 0, isim);
		SetPVarString(playerid, varname, isim);
		cache_get_value_index(i, 1, time);
		format(varname, sizeof(varname), "SBanOpIP_%d", i);
		cache_get_value_index(i, 2, ipadress);
		SetPVarString(playerid, varname, ipadress);
		format(str, sizeof(str), "%s{FFFFFF}%02d\t%s\t%s\n", str, i+1, isim, time);
	}
	ShowPlayerDialog(playerid, DIALOG_UNSBAN, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}UnBan", str, "Banı Aç", "Geri");
	return 1;
}
function CheckNBanList(playerid)
{
	new rows = cache_num_rows();
	if(!rows) return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}UnBan", "{FFFFFF}NBanlı kimse bulunamadı.", "Tamam", "");
	new isim[24], str[1024], varname[32];
	format(str, sizeof(str), "{FFFFFF}#\t{FFFFFF}Oyuncu Ismi\n");
	for(new i; i < rows; i++)
	{
		format(varname, 25, "NBanOpName_%d",i);
		cache_get_value_index(i, 0, isim);
		SetPVarString(playerid, varname, isim);
		format(str, sizeof(str), "%s{FFFFFF}%02d\t%s\n", str, i+1, isim);
	}
	ShowPlayerDialog(playerid, DIALOG_UNNBAN, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}UnBan", str, "Banı Aç", "Geri");
	return 1;
}
function CheckIpBanList(playerid)
{
	new rows = cache_num_rows();
	if(!rows) return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""ANA_RENK"Owsla Gaming - {FFFFFF}UnBan","{FFFFFF}Ip banlı kimse bulunamadı.", "Tamam", "");
	new oyuncuname[25], ipadress[16], str[1024], tmes[32];
	format(str, sizeof(str), "{FFFFFF}#\t{FFFFFF}Oyuncu İsmi\t{FFFFFF}IP Adresi\t{FFFFFF}Tarih\n");
	for(new i; i < rows;i++)
	{
		format(oyuncuname, sizeof(oyuncuname), "IpBlockOp_%d", i);
		cache_get_value_index(i, 0, ipadress);
		SetPVarString(playerid, oyuncuname, ipadress);
		cache_get_value_index(i, 1, oyuncuname);
		cache_get_value_index(i, 2, tmes);
		format(str, sizeof(str), "%s{FFFFFF}%02d\t%s\t%s\t%s\n", str, i+1, oyuncuname, ipadress, tmes);
	}
	ShowPlayerDialog(playerid, DIALOG_UNIPBAN, DIALOG_STYLE_TABLIST_HEADERS, ""ANA_RENK"Owsla Gaming - {FFFFFF}UnBan", str, "Banı Aç", "Geri");
	return 1;
}
stock CheckNick(temp_name[])
{
	new str[128];
	mysql_format(Owsla, str, sizeof(str), "SELECT * FROM `oyuncular` WHERE `Name` = '%e'", temp_name);
	new Cache:VeriCek = mysql_query(Owsla, str);
	if(cache_num_rows())
	{
		cache_delete(VeriCek);
		return 1;
	}
	cache_delete(VeriCek);
	return 0;
}
function AkaKontrol(playerid)
{
	new str[128];
    mysql_format(Owsla, str, sizeof(str), "SELECT `Ip` FROM `akas` WHERE `Username` = '%e'", PlayerInfo[playerid][Name]);
	new Cache:VeriCek = mysql_query(Owsla, str);
	switch(cache_num_rows())
	{
	    case 0:
	    {
			mysql_format(Owsla, str, sizeof(str), "INSERT INTO `akas` (`Username`, `Ip`) VALUES ('%e', '%s')", PlayerInfo[playerid][Name], PlayerInfo[playerid][IP]);
	    	mysql_tquery(Owsla, str);
	    }
	    default:
	    {
		    mysql_format(Owsla, str, sizeof(str), "UPDATE `akas` SET `Ip` = '%s' WHERE `Username` = '%e'", PlayerInfo[playerid][IP], PlayerInfo[playerid][Name]);
		    mysql_tquery(Owsla, str);
	    }
	}
	cache_delete(VeriCek);
	return 1;
}
stock GetAka(playerid)
{
    new str[128], Isim[24], dialog[1024], count;
	mysql_format(Owsla, str, sizeof(str), "SELECT `Username` FROM `akas` WHERE `Ip` = '%s'", PlayerInfo[playerid][IP]);
	new Cache:VeriCek = mysql_query(Owsla, str);
	new rows = cache_num_rows();
	if(rows)
	{
	    format(dialog, sizeof(dialog),""ANA_RENK"#\t"ANA_RENK"Isim\n");
		for(new i = 0; i < rows; ++i)
		{
			cache_get_value_name(i, "Username", Isim);
			format(dialog, sizeof(dialog),"%s"ANA_RENK"%02d)\t{FFFFFF}%s\n", dialog, count+1, Isim);
			count++;
 		}
	}
	cache_delete(VeriCek);
	return dialog;
}
function LoadRapors()
{
	new rows = cache_num_rows();
 	if(rows)
  	{
  	    new id, loaded;
		while(loaded < rows)
		{
		    cache_get_value_name_int(loaded, "RaporID", id);
			Iter_Add(Raporlar, id);
		    loaded++;
		}
		printf("[INIT] %d bug rapor yüklendi.", loaded);
  	}
	return 1;
}
function LoadUpdates()
{
	new rows = cache_num_rows();
 	if(rows)
  	{
  	    new id, loaded;
		while(loaded < rows)
		{
		    cache_get_value_name_int(loaded, "UpdateID", id);
			Iter_Add(Updates, id);
		    loaded++;
		}
		printf("[INIT] %d güncelleme yüklendi.", loaded);
  	}
	return 1;
}
stock EksikPara(playerid, deger)
{
	new str[256], dogalDeger = ((GetPlayerCash(playerid)-deger)-(GetPlayerCash(playerid)-deger)-(GetPlayerCash(playerid)-deger));
	format(str, sizeof(str), "Hata » {FFFFFF}Toplam "ANA_RENK"%d {FFFFFF}paraniz yok. Eksik olan miktar "ANA_RENK"%d$", deger, dogalDeger);
	return Hata(playerid, str);
}
stock EksikSkor(playerid, deger)
{
	new str[256], dogalDeger = ((GetPlayerScore(playerid)-deger)-(GetPlayerScore(playerid)-deger)-(GetPlayerScore(playerid)-deger));
	format(str, sizeof(str), "Hata » {FFFFFF}Toplam "ANA_RENK"%d {FFFFFF}skorunuz yok. Eksik olan miktar "ANA_RENK"%d {FFFFFF}skor", deger, dogalDeger);
	return Hata(playerid, str);
}
function OnObjectLoad(playerid)
{
	new rows = cache_num_rows(), in;
	for(new i; i < rows; i++)
	{
	    cache_get_value_index_int(i, 1, in);
		AttachInfo[playerid][in][index1] = in;
	 	cache_get_value_index_int(i, 2, AttachInfo[playerid][in][modelid1]);
	 	cache_get_value_index_int(i, 3, AttachInfo[playerid][in][bone1]);
	 	cache_get_value_index_float(i, 4, AttachInfo[playerid][in][fOffsetX1]);
	 	cache_get_value_index_float(i, 5, AttachInfo[playerid][in][fOffsetY1]);
 		cache_get_value_index_float(i, 6, AttachInfo[playerid][in][fOffsetZ1]);
	 	cache_get_value_index_float(i, 7, AttachInfo[playerid][in][fRotX1]);
 		cache_get_value_index_float(i, 8, AttachInfo[playerid][in][fRotY1]);
	 	cache_get_value_index_float(i, 9, AttachInfo[playerid][in][fRotZ1]);
		cache_get_value_index_float(i, 10, AttachInfo[playerid][in][fScaleX1]);
	 	cache_get_value_index_float(i, 11, AttachInfo[playerid][in][fScaleY1]);
	 	cache_get_value_index_float(i, 12, AttachInfo[playerid][in][fScaleZ1]);
		AttachInfo[playerid][in][used1] = true;
	}
	return 1;
}
function OnObjectSave(playerid, index, modelid, boneid)
{
    new query[256];
	if(!cache_num_rows())
	{
		mysql_format(Owsla, query, sizeof(query), "INSERT INTO `objects` (`UserID`, `Index`, `Model`, `Bone`, `OffsetX`, `OffsetY`, `OffsetZ`) VALUES ('%d', '%d', '%d', '%d', '%f', '%f', '%f')", PlayerInfo[playerid][UserID], index, modelid, boneid, AttachInfo[playerid][index][fOffsetX1], AttachInfo[playerid][index][fOffsetY1], AttachInfo[playerid][index][fOffsetZ1]);
		mysql_tquery(Owsla, query);
		mysql_format(Owsla, query, sizeof(query), "UPDATE `objects` SET `RotX` = '%f', `RotY` = '%f', `RotZ` = '%f', `ScaleX` = '%f', `ScaleY` = '%f', `ScaleZ` = '%f' WHERE `UserID` = '%d' AND `Index` = '%d'",AttachInfo[playerid][index][fRotX1], AttachInfo[playerid][index][fRotY1], AttachInfo[playerid][index][fRotZ1], AttachInfo[playerid][index][fScaleX1], AttachInfo[playerid][index][fScaleY1], AttachInfo[playerid][index][fScaleZ1], PlayerInfo[playerid][UserID], AttachInfo[playerid][index][index1]);
		mysql_tquery(Owsla, query);
	}
	mysql_format(Owsla, query, sizeof(query), "UPDATE `objects` SET `Model` = '%d', `Bone` = '%d', `OffsetX` = '%f', `OffsetY` = '%f', `OffsetZ` = '%f' WHERE `UserID` = '%d' AND `Index` = '%d'",modelid, boneid, AttachInfo[playerid][index][fOffsetX1], AttachInfo[playerid][index][fOffsetY1], AttachInfo[playerid][index][fOffsetZ1], PlayerInfo[playerid][UserID], AttachInfo[playerid][index][index1]);
	mysql_tquery(Owsla, query);
	mysql_format(Owsla, query, sizeof(query), "UPDATE `objects` SET `RotX` = '%f', `RotY` = '%f', `RotZ` = '%f', `ScaleX` = '%f', `ScaleY` = '%f', `ScaleZ` = '%f' WHERE `UserID` = '%d' AND `Index` = '%d'",AttachInfo[playerid][index][fRotX1], AttachInfo[playerid][index][fRotY1], AttachInfo[playerid][index][fRotZ1], AttachInfo[playerid][index][fScaleX1], AttachInfo[playerid][index][fScaleY1], AttachInfo[playerid][index][fScaleZ1], PlayerInfo[playerid][UserID], AttachInfo[playerid][index][index1]);
	mysql_tquery(Owsla, query);
	return 1;
}
function LoadDMs()
{
	new rows = cache_num_rows(), x, loaded;
	while(loaded < rows)
	{
	    cache_get_value_name_int(loaded, "dID", x);
	    cache_get_value_name(loaded, "dName", DmInfo[x][dName], 25);
	    cache_get_value_name_int(loaded, "dWeap1", DmInfo[x][dWeap1]);
	    cache_get_value_name_int(loaded, "dWeap2", DmInfo[x][dWeap2]);
	    cache_get_value_name_int(loaded, "dWeap3", DmInfo[x][dWeap3]);
	    cache_get_value_name_float(loaded, "dPosX", DmInfo[x][dPos][0]);
	    cache_get_value_name_float(loaded, "dPosY", DmInfo[x][dPos][1]);
	    cache_get_value_name_float(loaded, "dPosZ", DmInfo[x][dPos][2]);
	    cache_get_value_name_int(loaded, "dInt", DmInfo[x][dInt]);
	    cache_get_value_name_int(loaded, "dWorld", DmInfo[x][dWorld]);
	    cache_get_value_name_float(loaded, "dCan", DmInfo[x][dHP][0]);
	    cache_get_value_name_float(loaded, "dZirh", DmInfo[x][dHP][1]);
        Iter_Add(Dmler, x);
	    loaded++;
	}
	printf("[INIT] %d adet dm yuklendi.", loaded);
	return 1;
}
stock GetWeaponNameEx(weaponid)
{
	new weaponstr[45];
	switch(weaponid)
	{
	    case 0: weaponstr = "Fist";
	    case 18: weaponstr = "Molotov Cocktail";
        case 44: weaponstr = "Night Vision Goggles";
        case 45: weaponstr = "Thermal Goggles";
        default: GetWeaponName(weaponid, weaponstr, sizeof(weaponstr));
	}
	return weaponstr;
}
function HTTP_OnPlayerProxyCheck(playerid, response_code, data[])
{
	if(response_code == 200)
	{
		switch(data[0])
		{
			case 'Y': return KickReason(playerid, "Proxy Detected", "Sistem");
		}
	}
	return 1;
}
stock GetPlayerMedalsCount(playerid)
{
	new count = 0;
	for(new x = 0; x < sizeof(MedalInfo); x++)
	{
	   if(MyMedals[playerid][x] == 1) count++;
	}
	return count;
}
stock GiveMedal(playerid, medalid)
{
	if(PlayerInfo[playerid][IsLoggedIn] == true)
	{
		if(MyMedals[playerid][medalid] == 0)
		{
			MyMedals[playerid][medalid] = 1;
    		new msg[256], Query[168];
			format(msg, sizeof(msg), "Bilgi » {FFFFFF}'"ANA_RENK"%s{FFFFFF}' başarımını açtın. Kalan başarımlara bakmak için /basarimlar yazmalısın. "ANA_RENK"(%d/%d)", MedalInfo[medalid][mIsim], GetPlayerMedalsCount(playerid), sizeof(MedalInfo));
    		Bilgi(playerid, msg);

			mysql_format(Owsla, Query, sizeof(Query), "SELECT `Medal1` FROM `medals` WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
			mysql_tquery(Owsla, Query, "MedalsUpdate", "dd", playerid, medalid+1);

			GivePlayerCash(playerid, MedalInfo[medalid][mOdul][0]);
			GivePlayerScore(playerid, MedalInfo[medalid][mOdul][1]);
			GivePlayerExp(playerid, MedalInfo[medalid][mOdul][2]);
		    if(GetPlayerMedalsCount(playerid) == (sizeof(MedalInfo)-1)) GiveMedal(playerid, 0);
		}
	}
	return 1;
}
function MedalsUpdate(playerid, slot)
{
	new str[168];
    if(!cache_num_rows())
	{
		 mysql_format(Owsla, str, sizeof(str), "INSERT INTO `medals` (`UserID`, `Medal%d`) VALUES ('%d', 1)", slot, PlayerInfo[playerid][UserID]);
	     mysql_tquery(Owsla, str);
	}else
    {
		 mysql_format(Owsla, str, sizeof(str), "UPDATE `medals` SET `Medal%d` = '1' WHERE `UserID` = '%d'", slot, PlayerInfo[playerid][UserID]);
	     mysql_tquery(Owsla, str);
	}
    return 1;
}
function LoadMedals(playerid)
{
	new str[20];
    if(cache_num_rows())
    {
		for(new x = 1; x < (sizeof(MedalInfo)+1); x++)
		{
			format(str, sizeof(str), "Medal%d", x);
			cache_get_value_name_int(0, str, MyMedals[playerid][x-1]);
		}
	}
	return 1;
}
stock TurkceKarakter(txt[])
{
    new converted_txt[256];
    strcat(converted_txt, txt);
    for (new i = 0; i < 256; i++)
    {
        switch (converted_txt[i])
        {
            case 'ğ': converted_txt[i] = 'g';
            case 'Ğ': converted_txt[i] = 'G';
            case 'ş': converted_txt[i] = 's';
            case 'Ş': converted_txt[i] = 'S';
            case 'ı': converted_txt[i] = 'i';
            case 'ö': converted_txt[i] = 'o';
            case 'Ö': converted_txt[i] = 'O';
            case 'ç': converted_txt[i] = 'c';
            case 'Ç': converted_txt[i] = 'C';
            case 'ü': converted_txt[i] = 'u';
            case 'Ü': converted_txt[i] = 'U';
            case 'İ': converted_txt[i] = 'I';
        }
    }
    return converted_txt;
}
